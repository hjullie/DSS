{"version":3,"sources":["components/forms/PreferenceForm/FormSteps.module.css","components/forms/RangForm/FormSteps.module.css","components/RangeInput/RangeInput.module.css","common.module.css","App.module.css","components/MethodsAccordion/MethodsAccordion.module.css","components/ListInput/ListInput.module.css","components/forms/LSOForm/FormStep2.module.css","components/forms/LSOForm/FormStep1.module.css","constants.ts","routes.ts","components/BreadCrumbs/BreadCrumbs.tsx","components/forms/Form/Form.tsx","validators/isNotEmpty.ts","validators/fieldsValidators.ts","components/ListInput/ListInput.tsx","components/forms/MDForm/FormStep1.tsx","components/MatrixInput/MatrixInput.tsx","helpers/parseMatrixes.ts","helpers/object/deepCopy.ts","components/forms/MDForm/FormStep2.tsx","components/Matrix/Matrix.tsx","components/forms/MDForm/helpers/permutationToMatrix.ts","components/forms/MDForm/helpers/getMedianMatrixes.ts","helpers/permutations.ts","helpers/array/minIndexes.ts","helpers/array/sum.ts","helpers/matrix/sumByAxis.ts","helpers/array/sortByArray.ts","components/forms/MDForm/FormStep3.tsx","components/forms/MDForm/MDForm.tsx","components/forms/AHPForm/FormStep1.tsx","components/forms/AHPForm/FormStep2.tsx","helpers/matrix/reduce.ts","helpers/matrix/divideByAxis.ts","helpers/matrix/transpose.ts","components/MethodsAccordion/MethodsAccordion.tsx","components/forms/AHPForm/FormStep3.tsx","helpers/matrix/multiply.ts","components/forms/AHPForm/AHPForm.tsx","components/forms/PreferenceForm/FormStep1.tsx","components/forms/PreferenceForm/FormStep2.tsx","components/forms/PreferenceForm/FormStep3.tsx","helpers/matrix/map.ts","components/forms/PreferenceForm/PreferenceForm.tsx","components/forms/RangForm/FormStep1.tsx","components/forms/RangForm/FormStep2.tsx","components/forms/RangForm/FormStep3.tsx","components/forms/RangForm/RangForm.tsx","components/forms/LSOForm/FormStep1.tsx","components/RangeInput/RangeInput.tsx","components/forms/LSOForm/MyTableFilterRow/MyTableFilterRow.jsx","components/forms/LSOForm/FormStep2.tsx","components/forms/LSOForm/LSOForm.tsx","App.tsx","serviceWorker.ts","index.tsx","components/MatrixInput/MatrixInput.module.css","components/forms/MDForm/FormSteps.module.css","components/forms/AHPForm/FormSteps.module.css","components/Matrix/Matrix.module.css"],"names":["module","exports","CriteriaType","MatrixAxis","FORM_FIELDS","Methods","MethodsType","Routes","MethodsByType","Individual","AnalyticHierarchyProcess","LexicographicSemiOrdering","Group","MinimumDistance","Preference","Rang","routes","Home","AHP","MD","LSO","RouteByMethod","BreadCrumbs","method","className","methodType","includes","history","useHistory","onClick","React","useCallback","route","push","Breadcrumbs","Link","color","Typography","Form","getFormStepContent","step","stepTitles","Grid","commonStyles","content","xs","container","breadCrumbs","Stepper","stepper","activeStep","map","label","index","Step","key","StepLabel","Paper","form","elevation","isNotEmpty","value","fieldsValidators","CRITERIA","EXPERTS","ALTERNATIVES","CRITERIA_MATRIX","ALTERNATIVES_MATRIXES","ListInput","name","data","onChange","placeholderPrefix","maxCount","addVisible","length","onValueChange","e","currentTarget","newData","validators","error","currError","validator","onAdd","onDelete","slice","direction","styles","input","TextField","placeholder","variant","undefined","Boolean","fullWidth","deleteIcon","justify","item","Fab","aria-label","FormStep1","onSubmit","useState","Array","fill","alternatives","setAlternatives","experts","setExperts","validate","isValid","newCriteria","forEach","newExperts","onStepSubmit","criteriaValues","expertsValues","title","submit","Button","size","MatrixInput","labels","yLabels","onFieldChange","i","j","spacing","classNames","labelText","row","disabled","parseMatrixes","matrixes","matrix","match","parseInt","deepCopy","obj","JSON","parse","stringify","FormStep2","_","alternativesMatrixes","setAlternativesMatrixes","onAlternativesMatrixItemChange","matches","oppositeValue","newAlternativesMatrixes","Tooltip","arrow","tooltipText","icon","expert","Matrix","Table","table","TableBody","TableRow","TableCell","cell","permutationToMatrix","perm","getMedianMatrixes","Promise","resolve","permutationsList","permutations","arr","results","res","rest","concat","coefficientsList","vector","reduce","acc","val","Math","abs","min","minIndexes","coefList","sqrt","coef","sum","sumByAxis","axis","Column","nj","array","T","tolist","sortByArray","valueArr","sort","a","b","index1","indexOf","index2","FormStep3","alternativesData","medians","setMedians","useEffect","then","matrixIndex","median","c","coefIndex","sums","Row","alternative","CircularProgress","MDForm","setStep","setAlternativesData","onStep1Submit","onStep2Submit","getStepContent","criteria","setCriteria","newAlternatives","alternativesValues","criteriaMatrix","setCriteriaMatrix","onCriteriaMatrixItemChange","newCriteriaMatrix","TableHead","cr","sumColumnMatrix","divider","resultMatrix","divideByAxis","transpose","newMatrix","MethodAccordionType","matrix1","matrix2","criteriaData","criteriaNorm","matrixData","alternativesNorm","elm","k","sortedAlternatives","optimal","alignItems","tableThin","criterion","toFixed","info","AHPForm","setCriteriaData","DESCRIPTIONS","MethodAccordion","type","Object","values","filter","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","detail","button","setMatrix","onMatrixItemChange","parsedValue","fn","modifiedMatrix","columnSums","fullSum","weights","w","weightIndex","PreferenceForm","setMatrixData","RangForm","EMPTY_ERROR","emptyCriteria","String","lookup","onCriteriaNameChange","onCriteriaTypeChange","target","onCriteriaLookupChange","onCriteriaAdd","onCriteriaDelete","onCriteriaValueAdd","onCriteriaLookupDelete","_e","list","field","InputLabel","style","position","deleteCriteriaIcon","Select","MenuItem","jndex","IconButton","addValueButton","startIcon","RangeInput","onInputChange","event","itemValue","newValue","Number","inputs","MyTableFilterRow","columnDef","console","log","tableData","filterValue","props","onFilterChanged","id","filtering","customFilterAndSearch","filterComponent","this","renderFilterComponent","renderLookupFilter","renderBooleanFilter","renderDateTypeFilter","renderNumberTypeFilter","renderDefaultFilter","MTableFilterRow","rowData","cellValue","setData","columns","lookupValues","width","margin","padding","options","search","editable","isEditable","isDeletable","onRowAdd","newRow","onRowDelete","oldData","reject","setTimeout","components","FilterRow","onFilterChange","filters","LSOForm","App","app","path","menu","All","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2b512159.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__25ZJF\",\"container\":\"FormSteps_container__2FjY8\",\"info\":\"FormSteps_info__3VGnQ\",\"icon\":\"FormSteps_icon__2v0Ue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__1kfUJ\",\"container\":\"FormSteps_container__137aW\",\"info\":\"FormSteps_info__OAN0F\",\"icon\":\"FormSteps_icon__1nZrO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RangeInput_container__2930c\",\"inputs\":\"RangeInput_inputs__375Ga\",\"divider\":\"RangeInput_divider__2gdyF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stepper\":\"common_stepper__gv4K_\",\"content\":\"common_content__1OJW1\",\"form\":\"common_form__3oSDp\",\"breadCrumbs\":\"common_breadCrumbs__1Kz4e\",\"submit\":\"common_submit__3zjCe\",\"title\":\"common_title__1VPS_\",\"tooltipText\":\"common_tooltipText__2k_YZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"menu\":\"App_menu__3dqVM\",\"title\":\"App_title__-GfWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MethodsAccordion_title__2D8lx\",\"detail\":\"MethodsAccordion_detail__3bhU1\",\"button\":\"MethodsAccordion_button__3MPP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ListInput_input__33xMQ\",\"deleteIcon\":\"ListInput_deleteIcon__3aMX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormStep2_container__1ig9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteIcon\":\"FormStep1_deleteIcon__36p2u\",\"deleteCriteriaIcon\":\"FormStep1_deleteCriteriaIcon__2pp4o\",\"list\":\"FormStep1_list__25iym\",\"criteria\":\"FormStep1_criteria__KDwXn\",\"field\":\"FormStep1_field__3VmaW\",\"label\":\"FormStep1_label__2_f8f\",\"values\":\"FormStep1_values__16Njg\",\"value\":\"FormStep1_value__3J7WF\",\"addValueButton\":\"FormStep1_addValueButton__3A3BO\"};","export enum CriteriaType {\n    String = 'Множество',\n    Number = 'Число',\n}\n\nexport enum MatrixAxis {\n    Row,\n    Column,\n}\n\nexport enum FORM_FIELDS {\n    CRITERIA,\n    EXPERTS,\n    ALTERNATIVES,\n    CRITERIA_MATRIX,\n    ALTERNATIVES_MATRIXES,\n}\n\nexport enum Methods {\n    AnalyticHierarchyProcess = 'Метод аналитических иерархий',\n    LexicographicSemiOrdering = 'Метод лексикографического полуупорядочивания',\n    MinimumDistance = 'Метод минимального расстояния',\n    Preference = 'Метод предпочтений',\n    Rang = 'Метод ранга',\n}\n\nexport enum MethodsType {\n    Individual = 'Индивидуальные методы',\n    Group = 'Групповые методы',\n}\n\nexport const MethodsByType = {\n    [MethodsType.Individual]: [\n        Methods.AnalyticHierarchyProcess,\n        Methods.LexicographicSemiOrdering,\n    ],\n    [MethodsType.Group]: [\n        Methods.MinimumDistance,\n        Methods.Preference,\n        Methods.Rang,\n    ]\n}\n","import {Methods} from \"./constants\";\n\nexport enum Routes {\n    Home,\n    Group,\n    Individual,\n    MD,\n    AHP,\n    Preference,\n    Rang,\n    LSO,\n}\n\nexport const routes = {\n    [Routes.Home]: '/',\n    [Routes.Group]: '/group',\n    [Routes.Individual]: '/individual',\n    [Routes.AHP]: '/ahp',\n    [Routes.MD]: '/md',\n    [Routes.Preference]: '/preference',\n    [Routes.Rang]: '/rang',\n    [Routes.LSO]: '/lso',\n}\n\nexport const RouteByMethod = {\n    [Methods.AnalyticHierarchyProcess]: routes[Routes.AHP],\n    [Methods.MinimumDistance]: routes[Routes.MD],\n    [Methods.Preference]: routes[Routes.Preference],\n    [Methods.Rang]: routes[Routes.Rang],\n    [Methods.LexicographicSemiOrdering]: routes[Routes.LSO],\n}\n","import React from \"react\";\nimport {Methods, MethodsByType, MethodsType} from \"../../constants\";\nimport {Breadcrumbs, Link, Typography} from \"@material-ui/core\";\nimport {RouteByMethod, Routes, routes} from \"../../routes\";\nimport {useHistory} from \"react-router-dom\";\n\ninterface BreadCrumbsProps {\n    method: Methods;\n    className?: string;\n}\n\nexport const BreadCrumbs: React.FC<BreadCrumbsProps> = ({method, className}) => {\n    const methodType = MethodsByType[MethodsType.Group].includes(method) ? MethodsType.Group : MethodsType.Individual;\n\n    const history = useHistory();\n\n    const onClick = React.useCallback((route) => () => {\n        history.push(route);\n    }, [history]);\n\n    return (\n        <Breadcrumbs className={className}>\n            <Link color=\"inherit\" onClick={onClick(routes[Routes.Home])}>\n                Главная\n            </Link>\n            <Link color=\"inherit\"\n                  onClick={onClick(methodType === MethodsType.Group ? routes[Routes.Group] : routes[Routes.Individual])}>\n                {methodType}\n            </Link>\n            <Typography color=\"textPrimary\">{method}</Typography>\n        </Breadcrumbs>\n    );\n}\n","import React from 'react';\n\nimport {Grid, Paper, Step, StepLabel, Stepper} from \"@material-ui/core\";\n\nimport commonStyles from \"../../../common.module.css\";\nimport {BreadCrumbs} from \"../../BreadCrumbs/BreadCrumbs\";\nimport {Methods} from \"../../../constants\";\n\ninterface FormProps {\n    method: Methods;\n    getFormStepContent: () => React.ReactNode;\n    step: number;\n    stepTitles: string[];\n}\n\nexport const Form: React.FC<FormProps> = ({method, getFormStepContent, step, stepTitles}) => {\n\n    return (\n        <Grid className={commonStyles.content} xs={10} container>\n            <BreadCrumbs className={commonStyles.breadCrumbs} method={method} />\n\n            <Stepper className={commonStyles.stepper} activeStep={step - 1}>\n                {stepTitles.map((label, index) => {\n                    return (\n                        <Step key={index}>\n                            <StepLabel>\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    )}\n                )}\n            </Stepper>\n\n            <Paper className={commonStyles.form} elevation={1}>\n                {getFormStepContent()}\n            </Paper>\n        </Grid>\n    );\n};\n","export function isNotEmpty(value: string) {\n    return value === '' ? 'Это поле обязательно' : '';\n}\n","import {isNotEmpty} from \"./isNotEmpty\";\nimport {FORM_FIELDS} from \"../constants\";\n\nexport const fieldsValidators = {\n    [FORM_FIELDS.CRITERIA]: [isNotEmpty],\n    [FORM_FIELDS.EXPERTS]: [isNotEmpty],\n    [FORM_FIELDS.ALTERNATIVES]: [isNotEmpty],\n    [FORM_FIELDS.CRITERIA_MATRIX]: [isNotEmpty],\n    [FORM_FIELDS.ALTERNATIVES_MATRIXES]: [isNotEmpty]\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Fab, Grid, TextField} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styles from \"./ListInput.module.css\";\nimport {fieldsValidators} from \"../../validators/fieldsValidators\";\nimport {IField} from \"../../types\";\nimport {FORM_FIELDS} from \"../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IListInputProps {\n    name: FORM_FIELDS;\n    data: IField[];\n    onChange: (data: IField[]) => void;\n    placeholderPrefix: string;\n    maxCount?: number;\n}\n\nexport const ListInput: React.FC<IListInputProps> = ({name, data, onChange, placeholderPrefix, maxCount}) => {\n    const addVisible = !maxCount || data.length !== maxCount;\n    const onValueChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = [...data];\n            const validators = fieldsValidators[name] || [];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            newData[index] = {value, error};\n\n            onChange(newData);\n        }\n    }, [data, name, onChange]);\n\n    const onAdd = React.useCallback(() => {\n        const newData = [...data, {value: EMPTY_VALUE, error: ''}];\n\n        onChange(newData);\n    }, [data, onChange]);\n\n\n    const onDelete = React.useCallback((index) => {\n        return () => {\n            const newData = [...data.slice(0, index), ...data.slice(index + 1)];\n\n            onChange(newData);\n        }\n    }, [data, onChange]);\n\n    return (\n        <Grid container direction={'column'}>\n            {data.map(({value, error}, index) => {\n                return (\n                    <Grid key={index} className={styles.input} container>\n                        <TextField placeholder={`${placeholderPrefix} ${index + 1}`}\n                                   value={value}\n                                   variant={'outlined'}\n                                   onChange={onValueChange(index)}\n                                   label={error || undefined}\n                                   error={Boolean(error)}\n                                   fullWidth\n                        />\n                        {index >= INITIAL_COUNT && (\n                            <CloseIcon className={styles.deleteIcon} onClick={onDelete(index)}/>\n                        )}\n                    </Grid>\n                );\n            })}\n            {addVisible && <Grid justify={'flex-end'} container item>\n                <Fab onClick={onAdd} color=\"primary\" aria-label=\"add\">\n                    <AddIcon />\n                </Fab>\n            </Grid>}\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                               maxCount={7}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport styles from \"./MatrixInput.module.css\";\nimport classNames from \"classnames\";\nimport {IField} from \"../../types\";\n\ninterface IMatrixInputProps {\n    className?: string;\n    title?: string;\n    labels: string[];\n    yLabels?: string[];\n    data: IField[][];\n    onFieldChange: (value: string, position: {i: number; j: number}) => void;\n}\n\nexport const MatrixInput: React.FC<IMatrixInputProps> = ({className, title, labels, yLabels, data, onFieldChange}) => {\n    const onValueChange = React.useCallback((i: number, j: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            onFieldChange(value, {i, j})\n        }\n    }, [onFieldChange]);\n\n    // const onBlur = React.useCallback((i: number, j: number) => {\n    //     return (e: FocusEvent<HTMLInputElement>) => {\n    //         onChange(e, i, j);\n    //     }\n    // }, []);\n\n    return (\n      <Grid className={className} direction={'column'}>\n          <Grid container item spacing={1}>\n              <>\n                  <Grid className={classNames(styles.item, styles.label)} item>\n                      <b className={styles.labelText}>{title}</b>\n                  </Grid>\n                  {labels.map((label, index) => {\n                      return (\n                          <Grid className={classNames(styles.item, styles.label)} key={`label-top-${index}`} item>\n                              <span className={styles.labelText}>{label}</span>\n                          </Grid>\n                      )\n                  })}\n              </>\n          </Grid>\n\n          {data.map((row, i) => {\n              return (\n                  <Grid key={`row-${i}`} container item spacing={1}>\n                      <Grid className={classNames(styles.item, styles.label)} key={`label-left-${i}`} item>\n                          <span className={styles.labelText}>{(yLabels && yLabels[i]) || labels[i]}</span>\n                      </Grid>\n\n                      {row.map(({value, error}, j) => {\n                          return (\n                              <Grid key={`item-${i}-${j}`} className={styles.item} item>\n                                  <TextField\n                                      value={value}\n                                      onChange={onValueChange(i, j)}\n                                      variant={'outlined'}\n                                      error={Boolean(error)}\n                                      disabled={!yLabels && i === j}\n                                      // onBlur={onBlur(i, j)}\n                                      fullWidth\n                                  />\n                              </Grid>\n                          )}\n                      )}\n                  </Grid>\n              )}\n          )}\n      </Grid>\n    );\n};\n","import {IField} from \"../types\";\n\nexport function parseMatrixes(matrixes: IField[][][]) {\n    return matrixes.map((matrix) => {\n        return matrix.map((row) => {\n            return row.map(({value}) => {\n                const match = value.match(/1\\/([1-9])/);\n\n                return match ? 1 / parseInt(match[1]) : parseInt(value, 10);\n            })\n        })\n    })\n}\n","export function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {red} from \"@material-ui/core/colors\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (criteriaMatrixes: number[][][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [alternativesMatrixes, setAlternativesMatrixes] = React.useState<IField[][][]>(() => {\n        return experts.map(() => {\n            return alternatives.map((_, i) => {\n                return alternatives.map((_, j) => {\n                    return {\n                        value: i === j ? '0' : EMPTY_VALUE,\n                        error: '',\n                    };\n                })\n            });\n        })\n\n    });\n\n    const onAlternativesMatrixItemChange = React.useCallback((index) => {\n        return (value: string, {i, j}: { i: number; j: number }) => {\n            const matches = value.match(/^1$|^-1$/);\n            const newData = [...alternativesMatrixes[index]];\n\n            if (value.match(/^[-1]*$/)) {\n                newData[i][j] = {\n                    value,\n                    error: !matches ? 'error' : '',\n                };\n\n                let oppositeValue = '';\n\n                if (matches) {\n                    if (matches[0] === '1') {\n                        oppositeValue = '-1';\n                    } else {\n                        oppositeValue = '1';\n                    }\n                }\n\n                newData[j][i] = {\n                    value: oppositeValue,\n                    error: '',\n                };\n\n                const newAlternativesMatrixes = [...alternativesMatrixes];\n                newAlternativesMatrixes[index] = newData;\n                setAlternativesMatrixes(newAlternativesMatrixes)\n            }\n        }\n    }, [alternativesMatrixes]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newAlternativesMatrixes = deepCopy<IField[][][]>(alternativesMatrixes);\n\n        newAlternativesMatrixes.forEach((matrix) => {\n            matrix.forEach((row) => {\n                row.forEach(({value}, index) => {\n                    const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                    let error = '';\n\n                    for (let validator of validators) {\n                        const currError = validator(value);\n\n                        if (currError) {\n                            error = currError;\n                            break;\n                        }\n                    }\n\n                    if (error) {\n                        row[index].error = error;\n\n                        isValid = false;\n                    }\n                });\n            });\n        })\n\n        setAlternativesMatrixes(newAlternativesMatrixes);\n\n        return isValid;\n    }, [alternativesMatrixes]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes(alternativesMatrixes));\n        }\n    }, [alternativesMatrixes, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицы попарного сравнения\n                <Tooltip arrow\n                         title={\n                            <span className={commonStyles.tooltipText}>Укажите значение 1, если альтернатива лучше, и значение -1, если хуже</span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon} />\n                </Tooltip>\n            </div>\n\n            {experts.map((expert, index) => {\n                return (\n                    <MatrixInput key={index} className={styles.matrix}\n                                 onFieldChange={onAlternativesMatrixItemChange(index)}\n                                 data={alternativesMatrixes[index]}\n                                 title={expert} labels={alternatives}/>\n                );\n            })}\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from \"react\";\nimport {Table, TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport styles from \"./Matrix.module.css\";\nimport classNames from \"classnames\";\n\ninterface IMatrixProps {\n    className?: string;\n    title?: string;\n    labels: string[];\n    yLabels?: string[];\n    data: number[][];\n}\n\nexport const Matrix: React.FC<IMatrixProps> = ({className, data, title, labels, yLabels}) => {\n    return (\n        <Table className={classNames(styles.table, className)}>\n            <TableBody>\n                <TableRow className={styles.row}>\n                    <TableCell className={styles.cell}>\n                        <b>{title}</b>\n                    </TableCell>\n                    {labels.map((label, index) => {\n                        return (\n                            <TableCell className={styles.cell} key={'row-label-' + index}>\n                                {label}\n                            </TableCell>\n                        )\n                    })}\n                </TableRow>\n\n                {data.map((row, i) => {\n                        return (\n                            <TableRow key={i} className={styles.row}>\n                                <TableCell className={styles.cell}>\n                                    {(yLabels && yLabels[i]) || labels[i]}\n                                </TableCell>\n\n                                {row.map((value, j) => {\n                                        return (\n                                            <TableCell className={styles.cell} key={`item-${i}-${j}`}>\n                                                {value}\n                                            </TableCell>\n                                        )\n                                    }\n                                )}\n                            </TableRow>\n                        )\n                    }\n                )}\n            </TableBody>\n        </Table>\n    );\n};\n","export function permutationToMatrix(perm: number[], size: number): number[][] {\n    const matrix = new Array(size).fill(0).map(_ => new Array(size).fill(0));\n\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = 0; j < matrix.length; j++) {\n            if (i === j) {\n                matrix[i][j] = 0;\n            } else if (i > j) {\n                matrix[i][j] = -matrix[j][i];\n            } else {\n                const index = (2 * size - i - 1) * i / 2 + j - i - 1;\n\n                matrix[i][j] = perm[index];\n            }\n        }\n    }\n\n    return matrix;\n}\n","import {permutations} from \"../../../../helpers/permutations\";\nimport {minIndexes} from \"../../../../helpers/array/minIndexes\";\nimport {permutationToMatrix} from \"./permutationToMatrix\";\n\nexport function getMedianMatrixes(matrixes: number[][][], size: number) {\n    return new Promise<{matrix: number[][]; coef: number[]}[]>((resolve) => {\n        const permutationsList: number[][] = permutations([-1, 1], size * (size - 1) / 2);\n\n        const coefficientsList = permutationsList.map((perm) => {\n            return matrixes.map((matrix) => {\n                const vector: number[] = [];\n\n                for (let i = 0; i < size - 1; i++) {\n                    for (let j = i + 1; j < size; j++) {\n                        vector.push(matrix[i][j]);\n                    }\n                }\n\n                return perm.reduce((acc, val, index) => {\n                    return acc + Math.abs(val - vector[index]);\n                }, 0);\n            })\n        });\n\n        const medianMatrixIndexes = minIndexes(coefficientsList.map((coefList) => {\n            return Math.sqrt(coefList.reduce((acc, item) => acc + item * item, 0));\n        }))\n\n        resolve(medianMatrixIndexes.map((index) => {\n            return {matrix: permutationToMatrix(permutationsList[index], size), coef: coefficientsList[index]};\n        }));\n    })\n}\n","export function permutations(arr: any[], size: number): any[][] {\n    const  results = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const  res = [arr[i]];\n\n        if (size === 1) {\n            results.push(res)\n        } else {\n            const rest = permutations(arr, size - 1);\n\n            for (let j = 0; j < rest.length; j++) {\n                results.push(res.concat(rest[j]))\n            }\n        }\n    }\n    return results\n}\n","export function minIndexes(arr: number[]): number[] {\n    let min = arr[0];\n    let minIndexes: number[] = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndexes = [i];\n        } else if (arr[i] === min) {\n            minIndexes.push(i);\n        }\n    }\n\n    return minIndexes;\n}\n","export function sum(arr: number[]) {\n    return arr.reduce((acc, item) => acc + item, 0)\n}\n","import {MatrixAxis} from \"../../constants\";\nimport {sum} from \"../array/sum\";\nimport nj from \"numjs\"\n\nexport function sumByAxis(matrix: number[][], axis: MatrixAxis): number[] {\n    const prepMatrix = axis === MatrixAxis.Column ? nj.array(matrix).T.tolist() : matrix;\n\n    return prepMatrix.map((row) => sum(row));\n}\n","export function sortByArray<T = string>(arr: T[], valueArr: number[]) {\n    return [...arr].sort((a, b) => {\n        const index1 = arr.indexOf(a);\n        const index2 = arr.indexOf(b);\n\n        return valueArr[index2] - valueArr[index1];\n    })\n}\n","import React from 'react';\n\nimport {CircularProgress} from \"@material-ui/core\";\nimport {Matrix} from \"../../Matrix/Matrix\";\nimport {getMedianMatrixes} from \"./helpers/getMedianMatrixes\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    alternativesData: number[][][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, alternativesData}) => {\n    const [medians, setMedians] = React.useState<{ matrix: number[][]; coef: number[] }[]>();\n\n    React.useEffect(() => {\n        getMedianMatrixes(alternativesData, alternatives.length)\n            .then((medians) => {\n                setMedians(medians);\n            })\n    })\n\n    return (\n        <div className={styles.container}>\n            {!medians ? (\n                <CircularProgress/>\n            ) : (\n                <>\n                    <div className={commonStyles.title}>\n                        Исходные матрицы\n                    </div>\n\n                    <div className={styles.matrixes}>\n                        {alternativesData.map((matrix, index) => {\n                            return (\n                                <Matrix key={'alternative-matrix-' + index} className={styles.matrix}\n                                        title={experts[index]} labels={alternatives} data={matrix}/>\n                            );\n                        })}\n                    </div>\n\n                    <div className={commonStyles.title}>\n                        Матрица(ы) с минимальным суммарным расстоянием до всех экспертных матриц\n                    </div>\n\n                    {medians.map(({matrix, coef}, matrixIndex) => {\n                        return (\n                            <div className={styles.median}>\n                                <Matrix key={'median-matrix-' + matrixIndex} className={styles.matrix}\n                                        labels={alternatives} data={matrix}/>\n\n                                <span>\n                                    Расстояние до экспертной матрицы\n                                    {coef.map((c, coefIndex) => {\n                                        return (\n                                            <span key={'coef-' + matrixIndex + coefIndex}>\n                                                {coefIndex !== 0 ? ',' : ''}\n                                                <b> \"{experts[coefIndex]}\"</b> = {c * 2}\n                                            </span>\n                                        );\n                                    })}\n                                </span>\n\n                            </div>\n                        );\n                    })}\n\n                    <div className={commonStyles.title}>\n                        Медиана Кемени-Снелла (ранжировка(и), наиболее точно удовлетворяющая всем экспертам)\n                    </div>\n\n                    {medians.map(({matrix}, matrixIndex) => {\n                        const sums = sumByAxis(matrix, MatrixAxis.Row);\n\n                        return (\n                            <div key={matrixIndex} className={styles.median}>\n                                <span>\n                                    {sortByArray(alternatives, sums).map((alternative, index) => {\n                                        return (\n                                            <b>\n                                                {index === 0 ? alternative : `, ${alternative}`}\n                                            </b>\n                                        );\n                                    })}\n                                </span>\n\n                            </div>\n                        );\n                    })}\n                </>\n            )}\n        </div>\n    );\n};\n","import React from 'react';\n\nimport {Form} from \"../Form/Form\";\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрицы попарного сравнения', 'Результаты'];\n\nexport const MDForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [alternativesData, setAlternativesData] = React.useState<number[][][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((alternativesData: number[][][]) => {\n        setAlternativesData(alternativesData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit}/>;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} alternativesData={alternativesData}/>;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, alternativesData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.MinimumDistance} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles}/>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], alternatives: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [criteria, setCriteria] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...criteria];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.CRITERIA];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setCriteria(newCriteria);\n\n        const newAlternatives = [...alternatives];\n\n        newAlternatives.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newAlternatives[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newAlternatives);\n\n        return isValid;\n    }, [criteria, alternatives]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = criteria.map(({value}) => value);\n            const alternativesValues = alternatives.map(({value}) => value);\n\n            onSubmit(criteriaValues, alternativesValues);\n        }\n    }, [alternatives, criteria, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия критериев и альтернатив\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.CRITERIA} data={criteria} onChange={setCriteria}\n                               placeholderPrefix={'Критерий'}\n                               maxCount={10}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                               maxCount={10}\n                    />\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    criteria: string[];\n    alternatives: string[];\n    onSubmit: (criteriaMatrix: number[][], alternativesMatrixes: number[][][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({criteria, alternatives, onSubmit}) => {\n    const [criteriaMatrix, setCriteriaMatrix] = React.useState<IField[][]>(() => {\n        return criteria.map((_, i) => {\n            return criteria.map((_, j) => {\n                return {\n                    value: i === j ? '1' : EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        });\n    });\n\n    const [alternativesMatrixes, setAlternativesMatrixes] = React.useState<IField[][][]>(() => {\n        return criteria.map(() => {\n            return alternatives.map((_, i) => {\n                return alternatives.map((_, j) => {\n                    return {\n                        value: i === j ? '1' : EMPTY_VALUE,\n                        error: '',\n                    };\n                })\n            });\n        })\n\n    });\n\n    const onCriteriaMatrixItemChange = React.useCallback((value: string, {i, j}: {i: number; j: number}) => {\n        const matches = value.match(/^([1-9])$|^1\\/([2-9])$/);\n        const newData = [...criteriaMatrix];\n\n        if (value.match(/^[1-9/]*$/)) {\n            newData[i][j] = {\n                value,\n                error: !matches ? 'error' : '',\n            };\n\n            let oppositeValue = '';\n\n            if (matches) {\n                if (matches[2]) {\n                    oppositeValue = `${matches[2]}`;\n                } else if (matches[1] === '1') {\n                    oppositeValue = '1';\n                } else {\n                    oppositeValue = `1/${matches[1]}`;\n                }\n            }\n\n            newData[j][i] = {\n                value: oppositeValue,\n                error: '',\n            };\n\n            setCriteriaMatrix(newData);\n        }\n    }, [criteriaMatrix])\n\n    const onAlternativesMatrixItemChange = React.useCallback((index) => {\n        return (value: string, {i, j}: {i: number; j: number}) => {\n            const matches = value.match(/^([1-9])$|^1\\/([2-9])$/);\n            const newData = [...alternativesMatrixes[index]];\n\n            if (value.match(/^[1-9/]*$/)) {\n                newData[i][j] = {\n                    value,\n                    error: !matches ? 'error' : '',\n                };\n\n                let oppositeValue = '';\n\n                if (matches) {\n                    if (matches[2]) {\n                        oppositeValue = `${matches[2]}`;\n                    } else if (matches[1] === '1') {\n                        oppositeValue = '1';\n                    } else {\n                        oppositeValue = `1/${matches[1]}`;\n                    }\n                }\n\n                newData[j][i] = {\n                    value: oppositeValue,\n                    error: '',\n                };\n            }\n\n            const newAlternativesMatrixes = [...alternativesMatrixes];\n            newAlternativesMatrixes[index] = newData;\n            setAlternativesMatrixes(newAlternativesMatrixes)\n        }\n    }, [alternativesMatrixes]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteriaMatrix = [...criteriaMatrix];\n\n        newCriteriaMatrix.forEach((row, i) => {\n            row.forEach(({value}, j) => {\n                const validators = fieldsValidators[FORM_FIELDS.CRITERIA_MATRIX];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    newCriteriaMatrix[i][j].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setCriteriaMatrix(newCriteriaMatrix);\n\n        const newAlternativesMatrixes = deepCopy<IField[][][]>(alternativesMatrixes);\n\n        newAlternativesMatrixes.forEach((matrix) => {\n            matrix.forEach((row) => {\n                row.forEach(({value}, index) => {\n                    const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                    let error = '';\n\n                    for (let validator of validators) {\n                        const currError = validator(value);\n\n                        if (currError) {\n                            error = currError;\n                            break;\n                        }\n                    }\n\n                    if (error) {\n                        row[index].error = error;\n\n                        isValid = false;\n                    }\n                });\n            });\n        })\n\n        setAlternativesMatrixes(newAlternativesMatrixes);\n\n        return isValid;\n    }, [alternativesMatrixes, criteriaMatrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([criteriaMatrix])[0], parseMatrixes(alternativesMatrixes));\n        }\n    }, [alternativesMatrixes, criteriaMatrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Попарно сравните критерии и альтернативы между собой, указав степень важности согласно таблице\n            </div>\n\n            <Table className={styles.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Уровни важности</TableCell>\n                        <TableCell>Количественное значение</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>Равная важность</TableCell>\n                        <TableCell>1</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Немного лучше (хуже)</TableCell>\n                        <TableCell>3 (1/3)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Лучше (хуже)</TableCell>\n                        <TableCell>5 (1/5)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Значительно лучше (хуже)</TableCell>\n                        <TableCell> 7 (1/7)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Принципиально лучше (хуже)</TableCell>\n                        <TableCell>9 (1/9)</TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n\n            <div className={commonStyles.title}>\n                Критерии\n            </div>\n\n            <MatrixInput className={styles.matrix} onFieldChange={onCriteriaMatrixItemChange} data={criteriaMatrix} labels={criteria}/>\n\n            <div className={commonStyles.title}>\n                Альтернативы\n            </div>\n\n            {criteria.map((cr, index) => {\n                return (\n                    <MatrixInput key={index} className={styles.matrix}\n                                 onFieldChange={onAlternativesMatrixItemChange(index)} data={alternativesMatrixes[index]}\n                                 title={cr} labels={alternatives}/>\n                );\n            })}\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import {sumByAxis} from \"./sumByAxis\";\nimport {divideByAxis} from \"./divideByAxis\";\nimport {MatrixAxis} from \"../../constants\";\n\nexport function reduce(matrix: number[][]): number[] {\n    const sumColumnMatrix = sumByAxis(matrix, MatrixAxis.Column)\n    const divColumnMatrix = divideByAxis(matrix, sumColumnMatrix.map((value) => value * matrix[0].length), MatrixAxis.Column)\n    return sumByAxis(divColumnMatrix, MatrixAxis.Row);\n}\n","import nj from \"numjs\";\nimport {MatrixAxis} from \"../../constants\";\n\nexport function divideByAxis(matrix: number[][], divider: number[], axis: MatrixAxis): number[][] {\n    const prepMatrix = axis === MatrixAxis.Column ? nj.array(matrix).T.tolist() : matrix;\n    const resultMatrix = prepMatrix.map((row, index) => row.map((item) => item / divider[index]));\n\n    return axis === MatrixAxis.Column ? nj.array(resultMatrix).T.tolist() : resultMatrix;\n}\n","export function transpose(matrix: number[][]): number[][] {\n    const newMatrix: number[][] = [];\n\n    matrix.forEach((row, i) => {\n        if (i === 0) {\n            row.forEach(() => newMatrix.push([]));\n        }\n\n        row.forEach((item, j) => {\n            newMatrix[j].push(item);\n        })\n    })\n\n    return newMatrix;\n}\n\n// [[1, 2]] -> [[1], [2]]\n","import {Button, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport styles from \"./MethodsAccordion.module.css\";\nimport {useHistory} from \"react-router-dom\";\nimport {RouteByMethod} from \"../../routes\";\nimport {Methods, MethodsByType, MethodsType} from \"../../constants\";\n\nexport enum MethodAccordionType {\n    Group,\n    Individual,\n    All,\n}\n\nconst DESCRIPTIONS = {\n    [Methods.AnalyticHierarchyProcess]: \"Метод аналитических иерархий относится к категории индивидуальных методов принятия решений. Суть метода заключается в вычислении ценности каждой альтернативы, путем оценки критериев между собой и сравнения альтернатив по заданным критериям.\",\n    [Methods.MinimumDistance]: \"Метод минимального расстояния относится к категории групповых методов принятия решений. Метод основан на анализе ранжировок альтернатив, заданных экспертами.\",\n    [Methods.Preference]: \"Метод предпочтений относится к категории групповых методов принятия решений. Метод основан на присвоении ранга альтернативе каждым экспертом.\",\n    [Methods.Rang]: \"Метод ранга относится к категории групповых методов принятия решений. Метод основан на балльных оценках альтернатив, указываемых несколькими экспертами.\",\n    [Methods.LexicographicSemiOrdering]: \"Метод лексикографического полуупорядочивания относится к категории индивидуальных методов принятия решений. Метод основан на количественной оценке каждой альтернативы.\",\n}\n\ninterface IMethodAccordionProps {\n    type: MethodAccordionType;\n    className?: string;\n}\n\nexport const MethodAccordion: React.FC<IMethodAccordionProps> = ({type, className}) => {\n    const history = useHistory();\n\n    const onClick = React.useCallback((method: Methods) => () => {\n        history.push(RouteByMethod[method]);\n    }, [history]);\n\n    return (\n        <div className={className}>\n            {Object.values(Methods)\n                .filter((method) => {\n                    if (type === MethodAccordionType.Individual) {\n                        return MethodsByType[MethodsType.Individual].includes(method);\n                    } else if (type === MethodAccordionType.Group) {\n                        return MethodsByType[MethodsType.Group].includes(method);\n                    }\n\n                    return true;\n                })\n                .map((method, index) => {\n                    return (\n                        <ExpansionPanel key={index}>\n                            <ExpansionPanelSummary\n                                expandIcon={<ExpandMoreIcon />}\n                            >\n                                <div className={styles.title}>\n                                    {method}\n                                </div>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails className={styles.detail}>\n                                <Typography color=\"textSecondary\">\n                                    {DESCRIPTIONS[method]}\n                                </Typography>\n\n                                <Button\n                                    className={styles.button}\n                                    key={index}\n                                    variant=\"contained\" color=\"primary\"\n                                    size=\"medium\"\n                                    onClick={onClick(method)}\n                                >\n                                    Рассчитать\n                                </Button>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    );\n                })\n            }\n        </div>\n    );\n};\n\n","import React from 'react';\n\nimport {Grid, Table, TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport {reduce} from \"../../../helpers/matrix/reduce\";\nimport {multiply} from \"../../../helpers/matrix/multiply\";\nimport {transpose} from \"../../../helpers/matrix/transpose\";\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\n\ninterface IFormStep3Props {\n    criteria: string[];\n    alternatives: string[];\n    criteriaData: number[][];\n    alternativesData: number[][][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({criteria, alternatives, criteriaData, alternativesData}) => {\n    const criteriaNorm = reduce(criteriaData);\n    const matrixData = transpose(alternativesData.map((matrix) => reduce(matrix)));\n    const alternativesNorm = transpose(multiply(matrixData, transpose([criteriaNorm])))[0];\n    const sortedAlternatives = sortByArray(alternatives, alternativesNorm);\n    const optimal = sortedAlternatives[0];\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"center\">\n            <div className={commonStyles.title}>\n                В результате сформирован вектор весов критериев и матрица весов альтернатив\n            </div>\n\n            <Grid justify={'space-between'} alignItems={\"center\"} container>\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell>\n                                <b>Вес в долях</b>\n                            </TableCell>\n                        </TableRow>\n\n                        {criteria.map((criterion, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <b>{criterion}</b>\n                                    </TableCell>\n                                    <TableCell>\n                                        {criteriaNorm[index].toFixed(2)}\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n\n                <ArrowRightAltIcon />\n\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n\n                            {criteria.map((criterion, index) => {\n                                return (\n                                    <TableCell key={index}>\n                                        <b>{criterion}</b>\n                                    </TableCell>\n                                );\n                            })}\n                        </TableRow>\n\n                        {alternatives.map((alternative, i) => {\n                            return (\n                                <TableRow key={i}>\n                                    <TableCell>\n                                        <b>{alternative}</b>\n                                    </TableCell>\n\n                                    {criteria.map((_, j) => {\n                                        return (\n                                            <TableCell key={`${i} + ${j}`}>\n                                                {matrixData[i][j].toFixed(2)}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n\n                <ArrowRightAltIcon />\n\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell>\n                                <b>Вес в долях</b>\n                            </TableCell>\n                        </TableRow>\n\n                        {alternatives.map((alternative, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <b>{alternative}</b>\n                                    </TableCell>\n                                    <TableCell>\n                                        {alternativesNorm[index].toFixed(2)}\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n            </Grid>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div className={styles.info}>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n\n            <div>\n                Оптимальная альтернатива - <b>{optimal}</b>\n            </div>\n        </Grid>\n    );\n};\n","export function multiply (matrix1: number[][], matrix2: number[][]) {\n    const result = new Array(matrix1.length).fill(0).map(_ => new Array(matrix2[0].length).fill(0));\n\n    return result.map((row, i) => {\n        return row.map((_, j) => {\n            return matrix1[i].reduce((sum, elm, k) => sum + (elm * matrix2[k][j]) ,0)\n        })\n    })\n}\n","import React from 'react';\n\nimport {Form} from \"../Form/Form\";\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Критерии и альтернативы', 'Матрицы попарного сравнения', 'Результаты'];\n\nexport const AHPForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [criteria, setCriteria] = React.useState<string[]>([]);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [criteriaData, setCriteriaData] = React.useState<number[][]>([]);\n    const [alternativesData, setAlternativesData] = React.useState<number[][][]>([]);\n\n    const onStep1Submit = React.useCallback((criteria: string[], alternatives: string[]) => {\n        setCriteria(criteria);\n        setAlternatives(alternatives);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((criteriaData: number[][], alternativesData: number[][][]) => {\n        setCriteriaData(criteriaData);\n        setAlternativesData(alternativesData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 criteria={criteria} alternatives={alternatives} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 criteria={criteria} alternatives={alternatives} alternativesData={alternativesData} criteriaData={criteriaData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, alternativesData, criteria, criteriaData, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.AnalyticHierarchyProcess} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (matrix: number[][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [matrix, setMatrix] = React.useState<IField[][]>(() => {\n        return experts.map(() => {\n            return alternatives.map(() => {\n                return {\n                    value: EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        })\n    });\n\n    const onMatrixItemChange = React.useCallback((value: string, {i, j}: { i: number; j: number }) => {\n        const newData = [...matrix];\n\n        if (value.match(/^[1-9]*$/)) {\n            const parsedValue = parseInt(value, 10);\n\n            newData[i][j] = {\n                value,\n                error: parsedValue < 1 || parsedValue > alternatives.length ? 'error' : '',\n            };\n\n            setMatrix(newData)\n        }\n    }, [alternatives.length, matrix]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newData = deepCopy<IField[][]>(matrix);\n\n        newData.forEach((row) => {\n            row.forEach(({value}, index) => {\n                const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    row[index].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setMatrix(newData);\n\n        return isValid;\n    }, [matrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([matrix])[0]);\n        }\n    }, [matrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицу предпочтений\n                <Tooltip arrow\n                         title={\n                             <span className={commonStyles.tooltipText}>\n                                 Укажите значение от 1 до {alternatives.length}, наиболее важной альтернативе присваивается значение 1\n                             </span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon}/>\n                </Tooltip>\n            </div>\n\n            <MatrixInput className={styles.matrix}\n                         onFieldChange={onMatrixItemChange}\n                         data={matrix}\n                         labels={alternatives}\n                         yLabels={experts}\n            />\n\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Matrix} from \"../../Matrix/Matrix\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {map} from \"../../../helpers/matrix/map\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\nimport {sum} from \"../../../helpers/array/sum\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    matrixData: number[][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, matrixData}) => {\n    const modifiedMatrix = map(matrixData, (value) => {\n        return alternatives.length - value;\n    })\n\n    const columnSums = sumByAxis(matrixData, MatrixAxis.Column);\n    const fullSum = sum(columnSums);\n    const weights = columnSums.map((value) => value / fullSum);\n\n    const sortedAlternatives = sortByArray(alternatives, weights);\n\n    return (\n        <div className={styles.container}>\n            <div className={commonStyles.title}>\n                Модифицированная матрица предпочтений\n            </div>\n\n            <Matrix className={styles.matrix} labels={alternatives} yLabels={experts} data={modifiedMatrix}/>\n\n            <div className={commonStyles.title}>\n                Веса альтернатив\n            </div>\n\n            <span className={styles.info}>\n                {weights.map((w, weightIndex) => {\n                    return (\n                        <span key={weightIndex}>\n                            {weightIndex !== 0 ? ',' : ''} <b>\"{alternatives[weightIndex]}\"</b> = {w.toFixed(2)}\n                        </span>\n                    );\n                })}\n            </span>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n","export function map<T = number>(matrix: T[][], fn: (value: T, i: number, j: number) => T) {\n    return matrix.map((row, i) => {\n        return row.map((value, j) => {\n            return fn(value, i, j);\n        })\n    })\n}\n","import React from 'react';\n\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\n\nimport {Form} from \"../Form/Form\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрица предпочтений', 'Результаты'];\n\nexport const PreferenceForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [matrixData, setMatrixData] = React.useState<number[][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((matrixData: number[][]) => {\n        setMatrixData(matrixData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} matrixData={matrixData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, matrixData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.Preference} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (matrix: number[][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [matrix, setMatrix] = React.useState<IField[][]>(() => {\n        return experts.map(() => {\n            return alternatives.map(() => {\n                return {\n                    value: EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        })\n    });\n\n    const onMatrixItemChange = React.useCallback((value: string, {i, j}: { i: number; j: number }) => {\n        const newData = [...matrix];\n\n        if (value.match(/^[0-9]*$/)) {\n            const parsedValue = parseInt(value, 10);\n\n            newData[i][j] = {\n                value,\n                error: parsedValue < 1 || parsedValue > 10 ? 'error' : '',\n            };\n\n            setMatrix(newData)\n        }\n    }, [matrix]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newData = deepCopy<IField[][]>(matrix);\n\n        newData.forEach((row) => {\n            row.forEach(({value}, index) => {\n                const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    row[index].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setMatrix(newData);\n\n        return isValid;\n    }, [matrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([matrix])[0]);\n        }\n    }, [matrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицу\n                <Tooltip arrow\n                         title={\n                             <span className={commonStyles.tooltipText}>\n                                 Укажите значение от 1 до 10, наиболее важной альтернативе присваивается значение 10\n                             </span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon}/>\n                </Tooltip>\n            </div>\n\n            <MatrixInput className={styles.matrix}\n                         onFieldChange={onMatrixItemChange}\n                         data={matrix}\n                         labels={alternatives}\n                         yLabels={experts}\n            />\n\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Matrix} from \"../../Matrix/Matrix\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {map} from \"../../../helpers/matrix/map\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\nimport {sum} from \"../../../helpers/array/sum\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    matrixData: number[][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, matrixData}) => {\n    const columnSums = sumByAxis(matrixData, MatrixAxis.Column);\n    const fullSum = sum(columnSums);\n    const weights = columnSums.map((value) => value / fullSum);\n\n    const sortedAlternatives = sortByArray(alternatives, weights);\n\n    return (\n        <div className={styles.container}>\n            <div className={commonStyles.title}>\n                Веса альтернатив\n            </div>\n\n            <span className={styles.info}>\n                {weights.map((w, weightIndex) => {\n                    return (\n                        <span key={weightIndex}>\n                            {weightIndex !== 0 ? ',' : ''} <b>\"{alternatives[weightIndex]}\"</b> = {w.toFixed(2)}\n                        </span>\n                    );\n                })}\n            </span>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\n\nimport {Form} from \"../Form/Form\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрица оценок', 'Результаты'];\n\nexport const RangForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [matrixData, setMatrixData] = React.useState<number[][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((matrixData: number[][]) => {\n        setMatrixData(matrixData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} matrixData={matrixData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, matrixData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.Rang} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React, {ChangeEvent} from 'react';\n\nimport {Button, Grid, IconButton, InputLabel, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport {IField} from \"../../../types\";\n\nimport styles from \"./FormStep1.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport classNames from \"classnames\";\nimport {CriteriaType} from \"../../../constants\";\nimport {ICriteriaData} from \"./LSOForm\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 1;\nconst EMPTY_ERROR = 'Это поле обязательно';\n\nconst emptyCriteria = {\n    name: {\n        value: EMPTY_VALUE,\n        error: '',\n    },\n    type: CriteriaType.String,\n    lookup: [\n        {\n            value: EMPTY_VALUE,\n            error: '',\n        }\n    ]\n}\n\nexport interface ICriteriaField {\n    name: IField;\n    type: CriteriaType,\n    lookup: IField[],\n}\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: ICriteriaData[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [criteria, setCriteria] = React.useState<ICriteriaField[]>(new Array(INITIAL_COUNT).fill(emptyCriteria));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = deepCopy(criteria);\n\n        newCriteria.forEach(({name, type, lookup}, index) => {\n            if (!name.value) {\n                newCriteria[index].name.error = EMPTY_ERROR;\n\n                isValid = false;\n            }\n\n            if (type === CriteriaType.String) {\n                lookup.forEach((value) => {\n                    if (!value.value) {\n                        value.error = EMPTY_ERROR;\n\n                        isValid = false;\n                    }\n                })\n            }\n        });\n\n        setCriteria(newCriteria);\n\n        return isValid;\n    }, [criteria]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaData = criteria.map(({name, type, lookup}) => (\n                {\n                    type,\n                    name: name.value,\n                    lookup: type === CriteriaType.String ? lookup.map(({value}) => value) : undefined,\n                })\n            );\n\n            onSubmit(criteriaData);\n        }\n    }, [onSubmit, validate]);\n\n    const onCriteriaNameChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = deepCopy(criteria);\n            const error = value ? '' : EMPTY_ERROR;\n\n            newData[index].name = {value, error};\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaTypeChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<{value: unknown}>) => {\n            const value = e.target.value;\n            const newData = deepCopy(criteria);\n\n            newData[index].type = value as CriteriaType;\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaLookupChange = React.useCallback((i: number, j: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = deepCopy(criteria);\n            const error = value ? '' : EMPTY_ERROR;\n\n            newData[i].lookup[j] = {value, error};\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaAdd = React.useCallback(() => {\n        const newData = [...criteria, emptyCriteria];\n\n        setCriteria(newData);\n    }, [criteria]);\n\n\n    const onCriteriaDelete = React.useCallback((index) => {\n        return () => {\n            const newData = [...criteria.slice(0, index), ...criteria.slice(index + 1)];\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaValueAdd = React.useCallback((index: number) => {\n        return () => {\n            const newData = deepCopy(criteria);\n\n            newData[index].lookup.push({value: '', error: ''});\n\n            setCriteria(newData);\n        }\n    }, [criteria])\n\n    const onCriteriaLookupDelete = React.useCallback((i: number, j: number) => {\n        return (_e: ChangeEvent<{}>) => {\n            const newData = deepCopy(criteria);\n\n            newData[i].lookup = newData[i].lookup.filter((_, index) => index !== j);\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите критерии\n            </div>\n\n            <div className={styles.list}>\n                {criteria.map(({name: {value, error}, type, lookup}, index) => {\n                    return (\n                        <div key={index} className={styles.criteria}>\n                            <div className={styles.field}>\n                                <InputLabel className={styles.label}>Название</InputLabel>\n                                <div style={{position: \"relative\"}}>\n                                    <TextField placeholder={`Критерий ${index + 1}`}\n                                               value={value}\n                                               variant={'outlined'}\n                                               onChange={onCriteriaNameChange(index)}\n                                               label={error || undefined}\n                                               error={Boolean(error)}\n                                               fullWidth\n                                    />\n\n                                    {index >= INITIAL_COUNT && (\n                                        <DeleteIcon\n                                            className={classNames(styles.deleteIcon, styles.deleteCriteriaIcon)}\n                                            onClick={onCriteriaDelete(index)}\n                                        />\n                                    )}\n                                </div>\n                            </div>\n\n                            <div className={styles.field}>\n                                <InputLabel className={styles.label}>Тип</InputLabel>\n                                <Select\n                                    value={type}\n                                    onChange={onCriteriaTypeChange(index)}\n                                    fullWidth\n                                >\n                                    {Object.values(CriteriaType).map((type, index) => {\n                                        return (\n                                            <MenuItem key={index} value={type}>{type}</MenuItem>\n                                        );\n                                    })}\n                                </Select>\n\n                                {type === CriteriaType.String && (\n                                    <div className={styles.values}>\n                                        <InputLabel className={styles.label}>Значения</InputLabel>\n\n                                        {lookup.map(({value, error}, jndex) => {\n                                            return (\n                                                <div className={styles.value}>\n                                                    <TextField\n                                                        key={jndex}\n                                                        placeholder={`Значение ${jndex + 1}`}\n                                                        value={value}\n                                                        variant={'outlined'}\n                                                        onChange={onCriteriaLookupChange(index, jndex)}\n                                                        label={error || undefined}\n                                                        error={Boolean(error)}\n                                                        fullWidth\n                                                    />\n\n                                                    {jndex > 0 && (\n                                                        <CloseIcon className={styles.deleteIcon} onClick={onCriteriaLookupDelete(index, jndex)}/>\n                                                    )}\n                                                </div>\n                                            );\n                                        })}\n\n                                        <IconButton className={styles.addValueButton} size=\"small\" onClick={onCriteriaValueAdd(index)} color=\"default\" aria-label=\"add\">\n                                            <AddIcon />\n                                        </IconButton>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n\n            <Grid className={commonStyles.submit} justify=\"space-between\" container>\n                <Button onClick={onCriteriaAdd} startIcon={<AddIcon />} size=\"large\" variant=\"contained\" color=\"default\">\n                    Добавить критерий\n                </Button>\n                <Button onClick={onStepSubmit} size=\"large\" variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Slider, TextField} from \"@material-ui/core\";\n\nimport styles from \"./RangeInput.module.css\"\n\ninterface RangeInputProps {\n    value?: (number | \"\")[];\n    onChange: (value: (number | \"\")[]) => void;\n}\n\nexport const RangeInput: React.FC<RangeInputProps> = ({value = [\"\", \"\"], onChange}) => {\n    const onInputChange = React.useCallback((index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n        const itemValue = event.target.value;\n        const newValue = [...value.slice(0, index), itemValue && Number(itemValue), ...value.slice(index + 1)]\n\n        onChange(newValue);\n    }, [onChange, value])\n\n    // const onSliderChange = React.useCallback((_e: React.ChangeEvent<{}>, sliderValue: number | number[]) => {\n    //     let newValue: (number | \"\")[];\n    //\n    //     if (value[0]) {\n    //         if (value[1]) {\n    //             newValue = sliderValue as number[];\n    //         } else {\n    //             newValue = [sliderValue as number, value[1]]\n    //         }\n    //     } else {\n    //         if (value[1]) {\n    //             newValue = [value[0], sliderValue as number];\n    //         } else {\n    //             newValue = [\"\", \"\"];\n    //         }\n    //     }\n    //\n    //     onChange(newValue);\n    // }, [onChange, value])\n    //\n    // let sliderValue: number | number[] | undefined;\n    // let minValue: number | undefined;\n    // let maxValue: number | undefined;\n    //\n    // if (value[0]) {\n    //     if (value[1]) {\n    //         sliderValue = value as number[];\n    //         minValue = value[0] - 10;\n    //         maxValue = value[1] + 10;\n    //     } else {\n    //         sliderValue = value[0]\n    //         minValue = value[0] - 10;\n    //         maxValue = value[0] + 10;\n    //     }\n    // } else {\n    //     if (value[1]) {\n    //         sliderValue = value[1];\n    //         minValue = value[1] - 10;\n    //         maxValue = value[1] + 10;\n    //     } else {\n    //         sliderValue = 0;\n    //     }\n    // }\n\n    return (\n        <div className={styles.container}>\n            {/*<Slider*/}\n            {/*    value={sliderValue}*/}\n            {/*    onChange={onSliderChange}*/}\n            {/*    max={maxValue}*/}\n            {/*    min={minValue}*/}\n            {/*/>*/}\n            <div className={styles.inputs}>\n                <span className={styles.divider}>от</span>\n\n                <TextField\n                    type=\"number\"\n                    value={value[0]}\n                    onChange={onInputChange(0)}\n                />\n\n                <span className={styles.divider}>–</span>\n\n                <span className={styles.divider}>до</span>\n\n                <TextField\n                    type=\"number\"\n                    value={value[1]}\n                    onChange={onInputChange(1)}\n                />\n            </div>\n        </div>\n    );\n}\n","import {MTableFilterRow} from \"material-table\";\nimport React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport {RangeInput} from \"../../../RangeInput/RangeInput\";\n\nexport class MyTableFilterRow extends MTableFilterRow {\n    renderNumberTypeFilter(columnDef) {\n        console.log(columnDef)\n        return (\n            <RangeInput value={columnDef.tableData.filterValue}\n                        onChange={(newValue) => this.props.onFilterChanged(columnDef.tableData.id, newValue)}\n            />\n            // <Slider\n            //     value={columnDef.tableData.filterValue || [100, 102]}\n            //     onChange={(_event, newValue) => this.props.onFilterChanged(columnDef.tableData.id, newValue)}\n            //     valueLabelDisplay=\"auto\"\n            // />\n        );\n    }\n\n    getComponentForColumn(columnDef) {\n        if (columnDef.filtering === false) {\n            return null;\n        }\n\n        if (columnDef.field || columnDef.customFilterAndSearch) {\n            if (columnDef.filterComponent) {\n                return this.renderFilterComponent(columnDef);\n            } else if (columnDef.lookup) {\n                return this.renderLookupFilter(columnDef);\n            } else if (columnDef.type === 'boolean') {\n                return this.renderBooleanFilter(columnDef);\n            } else if (['date', 'datetime', 'time'].includes(columnDef.type)) {\n                return this.renderDateTypeFilter(columnDef);\n            } else if (columnDef.type === 'numeric') {\n                return this.renderNumberTypeFilter(columnDef);\n            } else {\n                return this.renderDefaultFilter(columnDef);\n            }\n        }\n    }\n}\n","import React from 'react';\n\nimport {MyTableFilterRow} from \"./MyTableFilterRow/MyTableFilterRow\";\nimport MaterialTable, {Column} from \"material-table\";\n\nimport styles from \"./FormStep2.module.css\";\nimport {ICriteriaData} from \"./LSOForm\";\nimport {CriteriaType} from \"../../../constants\";\n\nconst customFilterAndSearch = (filterValue: (number | \"\")[], rowData: any, columnDef: any) => {\n    const cellValue = columnDef.field && rowData[columnDef.field] as number;\n    return Boolean(!cellValue || ((!filterValue[0] || cellValue >= filterValue[0]) && (!filterValue[1] || cellValue <= filterValue[1])));\n}\n\ninterface IFormStep1Props {\n    criteria: ICriteriaData[];\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({criteria}) => {\n    const [data, setData] = React.useState<object[]>([]);\n\n    const columns: Column<any>[] = criteria.map(({name, type, lookup}) => {\n        const lookupValues = lookup && lookup.reduce((acc, value) => {\n            return {...acc, [value]: value};\n        }, {})\n\n        return (\n            {\n                title: name,\n                field: name,\n                type: type === CriteriaType.Number ? 'numeric' : undefined,\n                customFilterAndSearch: type === CriteriaType.Number ? customFilterAndSearch : undefined,\n                lookup: lookupValues,\n            }\n        );\n    })\n\n    return (\n        <div className={styles.container}>\n            <MaterialTable\n                style={{width: '100%', margin: '-40px', padding: '30px'}}\n                title=\"Введите альтернативы, указав соответствующие значения для каждого критерия\"\n                columns={[\n                    { title: 'Название альтернативы', field: 'Альтернатива', filtering: false },\n                    ...columns\n                ]}\n                data={data}\n                options={{\n                    filtering: true,\n                    search: false,\n                }}\n                editable={{\n                    isEditable: () => true,\n                    isDeletable: () => true,\n                    onRowAdd: newRow =>\n                        new Promise((resolve) => {\n                            setData([...data, newRow]);\n                            resolve();\n                        }),\n                    onRowDelete: oldData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                {\n                                    /* const data = this.state.data;\n                                    data.push(newData);\n                                    this.setState({ data }, () => resolve()); */\n                                }\n                                reject();\n                            }, 1000);\n                        }),\n                }}\n                // @ts-ignore\n                components={{\n                    FilterRow: MyTableFilterRow,\n                }}\n                onFilterChange={(filters) => {console.log(filters)}}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport {FormStep1, ICriteriaField} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {Form} from \"../Form/Form\";\nimport {CriteriaType, Methods} from \"../../../constants\";\n\nexport interface ICriteriaData {\n    name: string;\n    type: CriteriaType;\n    lookup?: string[];\n}\n\nconst stepTitles = ['Критерии', 'Таблица альтернатив', 'Результаты'];\n\nexport const LSOForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [criteria, setCriteria] = React.useState<ICriteriaData[]>([]);\n\n    const onStep1Submit = React.useCallback((criteria: ICriteriaData[]) => {\n        setCriteria(criteria);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit}/>;\n            case 2:\n                return <FormStep2 criteria={criteria} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [criteria, onStep1Submit, step]);\n\n    return (\n        <Form method={Methods.LexicographicSemiOrdering} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles}/>\n    );\n}\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch,} from \"react-router-dom\";\n\nimport styles from './App.module.css';\n\nimport {MDForm} from \"./components/forms/MDForm/MDForm\";\nimport {AHPForm} from \"./components/forms/AHPForm/AHPForm\";\nimport {MethodAccordion, MethodAccordionType} from \"./components/MethodsAccordion/MethodsAccordion\";\nimport {PreferenceForm} from \"./components/forms/PreferenceForm/PreferenceForm\";\nimport {Routes, routes} from \"./routes\";\nimport {RangForm} from \"./components/forms/RangForm/RangForm\";\nimport {LSOForm} from \"./components/forms/LSOForm/LSOForm\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className={styles.app}>\n                <Switch>\n                    <Route path={routes[Routes.Group]}>\n                        <MethodAccordion type={MethodAccordionType.Group} className={styles.menu}/>\n                    </Route>\n                    <Route path={routes[Routes.Individual]}>\n                        <MethodAccordion type={MethodAccordionType.Individual} className={styles.menu}/>\n                    </Route>\n                    <Route path={routes[Routes.AHP]}>\n                        <AHPForm/>\n                    </Route>\n                    <Route path={routes[Routes.MD]}>\n                        <MDForm/>\n                    </Route>\n                    <Route path={routes[Routes.Preference]}>\n                        <PreferenceForm/>\n                    </Route>\n                    <Route path={routes[Routes.Rang]}>\n                        <RangForm/>\n                    </Route>\n                    <Route path={routes[Routes.LSO]}>\n                        <LSOForm/>\n                    </Route>\n                    <Route path={routes[Routes.Home]}>\n                        <MethodAccordion type={MethodAccordionType.All} className={styles.menu}/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MatrixInput_item__2jcE6\",\"label\":\"MatrixInput_label__HFQxS\",\"labelText\":\"MatrixInput_labelText__3xUZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__3PggM\",\"container\":\"FormSteps_container__24UPI\",\"matrixes\":\"FormSteps_matrixes__2VAmv\",\"median\":\"FormSteps_median__1QZFl\",\"icon\":\"FormSteps_icon__2tyT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"FormSteps_table__IFIgf\",\"tableThin\":\"FormSteps_tableThin__1FYcl\",\"matrix\":\"FormSteps_matrix__3xvUW\",\"info\":\"FormSteps_info__3TeNr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Matrix_table__1kxeZ\",\"row\":\"Matrix_row__2GaiU\",\"cell\":\"Matrix_cell__2UlPL\"};"],"sourceRoot":""}