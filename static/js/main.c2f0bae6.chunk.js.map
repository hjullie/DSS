{"version":3,"sources":["components/forms/PreferenceForm/FormSteps.module.css","components/forms/RangForm/FormSteps.module.css","components/RangeInput/RangeInput.module.css","App.module.css","common.module.css","components/ListInput/ListInput.module.css","components/MethodsAccordion/MethodsAccordion.module.css","constants.ts","routes.ts","components/BreadCrumbs/BreadCrumbs.tsx","components/forms/Form/Form.tsx","validators/isNotEmpty.ts","validators/fieldsValidators.ts","components/ListInput/ListInput.tsx","components/forms/MDForm/FormStep1.tsx","components/MatrixInput/MatrixInput.tsx","helpers/parseMatrixes.ts","helpers/object/deepCopy.ts","components/forms/MDForm/FormStep2.tsx","components/Matrix/Matrix.tsx","components/forms/MDForm/helpers/permutationToMatrix.ts","components/forms/MDForm/helpers/getMedianMatrixes.ts","helpers/permutations.ts","helpers/array/minIndexes.ts","helpers/array/sum.ts","helpers/matrix/sumByAxis.ts","helpers/array/sortByArray.ts","components/forms/MDForm/FormStep3.tsx","components/forms/MDForm/MDForm.tsx","components/forms/AHPForm/FormStep1.tsx","components/forms/AHPForm/FormStep2.tsx","helpers/matrix/reduce.ts","helpers/matrix/divideByAxis.ts","helpers/matrix/transpose.ts","components/MethodsAccordion/MethodsAccordion.tsx","components/forms/AHPForm/FormStep3.tsx","helpers/matrix/multiply.ts","components/forms/AHPForm/AHPForm.tsx","components/forms/PreferenceForm/FormStep1.tsx","components/forms/PreferenceForm/FormStep2.tsx","components/forms/PreferenceForm/FormStep3.tsx","components/forms/LSOForm/FormStep1.tsx","helpers/matrix/map.ts","components/forms/PreferenceForm/PreferenceForm.tsx","components/forms/RangForm/FormStep1.tsx","components/forms/RangForm/FormStep2.tsx","components/forms/RangForm/FormStep3.tsx","components/forms/RangForm/RangForm.tsx","components/RangeInput/RangeInput.tsx","components/forms/LSOForm/MyTableFilterRow/MyTableFilterRow.jsx","components/forms/LSOForm/FormStep2.tsx","components/forms/LSOForm/LSOForm.tsx","App.tsx","serviceWorker.ts","index.tsx","components/forms/LSOForm/FormStep1.module.css","components/MatrixInput/MatrixInput.module.css","components/forms/MDForm/FormSteps.module.css","components/forms/AHPForm/FormSteps.module.css","components/Matrix/Matrix.module.css"],"names":["module","exports","MatrixAxis","FORM_FIELDS","Methods","MethodsType","Routes","MethodsByType","Individual","AnalyticHierarchyProcess","LexicographicSemiOrdering","Group","MinimumDistance","Preference","Rang","routes","Home","AHP","MD","LSO","RouteByMethod","BreadCrumbs","method","methodType","includes","Breadcrumbs","Link","color","href","Typography","Form","getFormStepContent","step","stepTitles","Grid","className","commonStyles","content","xs","container","Stepper","stepper","activeStep","map","label","index","Step","key","StepLabel","Paper","form","elevation","isNotEmpty","value","fieldsValidators","CRITERIA","EXPERTS","ALTERNATIVES","CRITERIA_MATRIX","ALTERNATIVES_MATRIXES","ListInput","name","data","onChange","placeholderPrefix","maxCount","addVisible","length","onValueChange","React","useCallback","e","currentTarget","newData","validators","error","currError","validator","onAdd","onDelete","slice","direction","styles","input","TextField","placeholder","variant","undefined","Boolean","fullWidth","deleteIcon","onClick","justify","item","Fab","aria-label","FormStep1","onSubmit","useState","Array","fill","alternatives","setAlternatives","experts","setExperts","validate","isValid","newCriteria","forEach","newExperts","onStepSubmit","criteriaValues","expertsValues","title","submit","Button","size","MatrixInput","labels","yLabels","onFieldChange","i","j","spacing","classNames","labelText","row","disabled","parseMatrixes","matrixes","matrix","match","parseInt","deepCopy","obj","JSON","parse","stringify","FormStep2","_","alternativesMatrixes","setAlternativesMatrixes","onAlternativesMatrixItemChange","matches","oppositeValue","newAlternativesMatrixes","Tooltip","arrow","tooltipText","icon","expert","Matrix","Table","table","TableBody","TableRow","TableCell","cell","permutationToMatrix","perm","getMedianMatrixes","Promise","resolve","permutationsList","permutations","arr","results","res","push","rest","concat","coefficientsList","vector","reduce","acc","val","Math","abs","min","minIndexes","coefList","sqrt","coef","sum","sumByAxis","axis","Column","nj","array","T","tolist","sortByArray","valueArr","sort","a","b","index1","indexOf","index2","FormStep3","alternativesData","medians","setMedians","useEffect","then","matrixIndex","median","c","coefIndex","sums","Row","alternative","CircularProgress","MDForm","setStep","setAlternativesData","onStep1Submit","onStep2Submit","getStepContent","criteria","setCriteria","newAlternatives","alternativesValues","criteriaMatrix","setCriteriaMatrix","onCriteriaMatrixItemChange","newCriteriaMatrix","TableHead","cr","sumColumnMatrix","divider","resultMatrix","divideByAxis","transpose","newMatrix","MethodAccordionType","matrix1","matrix2","criteriaData","criteriaNorm","matrixData","alternativesNorm","elm","k","sortedAlternatives","optimal","alignItems","tableThin","criterion","toFixed","info","AHPForm","setCriteriaData","DESCRIPTIONS","MethodAccordion","type","history","useHistory","Object","values","filter","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","detail","button","setMatrix","onMatrixItemChange","parsedValue","CriteriaType","fn","modifiedMatrix","columnSums","fullSum","weights","w","weightIndex","PreferenceForm","setMatrixData","RangForm","emptyCriteria","String","lookup","onCriteriaNameChange","onCriteriaTypeChange","target","onCriteriaLookupChange","onCriteriaAdd","onCriteriaDelete","onCriteriaValueAdd","list","field","InputLabel","Select","MenuItem","jndex","IconButton","addValueButton","startIcon","RangeInput","onInputChange","event","itemValue","newValue","Number","inputs","MyTableFilterRow","columnDef","console","log","tableData","filterValue","props","onFilterChanged","id","filtering","customFilterAndSearch","filterComponent","this","renderFilterComponent","renderLookupFilter","renderBooleanFilter","renderDateTypeFilter","renderNumberTypeFilter","renderDefaultFilter","MTableFilterRow","columns","rowData","cellValue","options","search","editable","isEditable","isDeletable","onRowAdd","reject","setTimeout","components","FilterRow","onFilterChange","filters","LSOForm","App","app","path","menu","All","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c2f0bae6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__25ZJF\",\"container\":\"FormSteps_container__2FjY8\",\"info\":\"FormSteps_info__3VGnQ\",\"icon\":\"FormSteps_icon__2v0Ue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__1kfUJ\",\"container\":\"FormSteps_container__137aW\",\"info\":\"FormSteps_info__OAN0F\",\"icon\":\"FormSteps_icon__1nZrO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RangeInput_container__2930c\",\"inputs\":\"RangeInput_inputs__375Ga\",\"divider\":\"RangeInput_divider__2gdyF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"menu\":\"App_menu__3dqVM\",\"title\":\"App_title__-GfWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stepper\":\"common_stepper__gv4K_\",\"content\":\"common_content__1OJW1\",\"form\":\"common_form__3oSDp\",\"submit\":\"common_submit__3zjCe\",\"title\":\"common_title__1VPS_\",\"tooltipText\":\"common_tooltipText__2k_YZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ListInput_input__33xMQ\",\"deleteIcon\":\"ListInput_deleteIcon__3aMX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detail\":\"MethodsAccordion_detail__3bhU1\",\"button\":\"MethodsAccordion_button__3MPP_\"};","export enum MatrixAxis {\n    Row,\n    Column,\n}\n\nexport enum FORM_FIELDS {\n    CRITERIA,\n    EXPERTS,\n    ALTERNATIVES,\n    CRITERIA_MATRIX,\n    ALTERNATIVES_MATRIXES,\n}\n\nexport enum Methods {\n    AnalyticHierarchyProcess = 'Метод аналитических иерархий',\n    LexicographicSemiOrdering = 'Метод лексикографического полуупорядочивания',\n    MinimumDistance = 'Метод минимального расстояния',\n    Preference = 'Метод предпочтений',\n    Rang = 'Метод ранга',\n}\n\nexport enum MethodsType {\n    Individual = 'Индивидуальные методы',\n    Group = 'Групповые методы',\n}\n\nexport const MethodsByType = {\n    [MethodsType.Individual]: [\n        Methods.AnalyticHierarchyProcess,\n        Methods.LexicographicSemiOrdering,\n    ],\n    [MethodsType.Group]: [\n        Methods.MinimumDistance,\n        Methods.Preference,\n        Methods.Rang,\n    ]\n}\n","import {Methods} from \"./constants\";\n\nexport enum Routes {\n    Home,\n    Group,\n    Individual,\n    MD,\n    AHP,\n    Preference,\n    Rang,\n    LSO,\n}\n\nexport const routes = {\n    [Routes.Home]: '/',\n    [Routes.Group]: '/group',\n    [Routes.Individual]: '/individual',\n    [Routes.AHP]: '/ahp',\n    [Routes.MD]: '/md',\n    [Routes.Preference]: '/preference',\n    [Routes.Rang]: '/rang',\n    [Routes.LSO]: '/lso',\n}\n\nexport const RouteByMethod = {\n    [Methods.AnalyticHierarchyProcess]: routes[Routes.AHP],\n    [Methods.MinimumDistance]: routes[Routes.MD],\n    [Methods.Preference]: routes[Routes.Preference],\n    [Methods.Rang]: routes[Routes.Rang],\n    [Methods.LexicographicSemiOrdering]: routes[Routes.LSO],\n}\n","import React from \"react\";\nimport {Methods, MethodsByType, MethodsType} from \"../../constants\";\nimport {Breadcrumbs, Link, Typography} from \"@material-ui/core\";\nimport {Routes, routes} from \"../../routes\";\n\ninterface BreadCrumbsProps {\n    method: Methods;\n}\n\nexport const BreadCrumbs: React.FC<BreadCrumbsProps> = ({method}) => {\n    const methodType = MethodsByType[MethodsType.Group].includes(method) ? MethodsType.Group : MethodsType.Individual;\n\n    return (\n        <Breadcrumbs>\n            <Link color=\"inherit\" href={routes[Routes.Home]}>\n                Главная\n            </Link>\n            <Link color=\"inherit\" href={methodType === MethodsType.Group ? routes[Routes.Group] : routes[Routes.Individual]}>\n                {methodType}\n            </Link>\n            <Typography color=\"textPrimary\">{method}</Typography>\n        </Breadcrumbs>\n    );\n}\n","import React from 'react';\n\nimport {Grid, Paper, Step, StepLabel, Stepper} from \"@material-ui/core\";\n\n\nimport styles from \"./Form.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {BreadCrumbs} from \"../../BreadCrumbs/BreadCrumbs\";\nimport {Methods} from \"../../../constants\";\n\ninterface FormProps {\n    method: Methods;\n    getFormStepContent: () => React.ReactNode;\n    step: number;\n    stepTitles: string[];\n}\n\nexport const Form: React.FC<FormProps> = ({method, getFormStepContent, step, stepTitles}) => {\n\n    return (\n        <Grid className={commonStyles.content} xs={10} container>\n            <BreadCrumbs method={method} />\n            <Stepper className={commonStyles.stepper} activeStep={step - 1}>\n                {stepTitles.map((label, index) => {\n                    return (\n                        <Step key={index}>\n                            <StepLabel>\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    )}\n                )}\n            </Stepper>\n            <Paper className={commonStyles.form} elevation={1}>\n                {getFormStepContent()}\n            </Paper>\n        </Grid>\n    );\n};\n","export function isNotEmpty(value: string) {\n    return value === '' ? 'Это поле обязательно' : '';\n}\n","import {isNotEmpty} from \"./isNotEmpty\";\nimport {FORM_FIELDS} from \"../constants\";\n\nexport const fieldsValidators = {\n    [FORM_FIELDS.CRITERIA]: [isNotEmpty],\n    [FORM_FIELDS.EXPERTS]: [isNotEmpty],\n    [FORM_FIELDS.ALTERNATIVES]: [isNotEmpty],\n    [FORM_FIELDS.CRITERIA_MATRIX]: [isNotEmpty],\n    [FORM_FIELDS.ALTERNATIVES_MATRIXES]: [isNotEmpty]\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Fab, Grid, TextField} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styles from \"./ListInput.module.css\";\nimport {fieldsValidators} from \"../../validators/fieldsValidators\";\nimport {IField} from \"../../types\";\nimport {FORM_FIELDS} from \"../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IListInputProps {\n    name: FORM_FIELDS;\n    data: IField[];\n    onChange: (data: IField[]) => void;\n    placeholderPrefix: string;\n    maxCount?: number;\n}\n\nexport const ListInput: React.FC<IListInputProps> = ({name, data, onChange, placeholderPrefix, maxCount}) => {\n    const addVisible = !maxCount || data.length !== maxCount;\n    const onValueChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = [...data];\n            const validators = fieldsValidators[name] || [];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            newData[index] = {value, error};\n\n            onChange(newData);\n        }\n    }, [data, name, onChange]);\n\n    const onAdd = React.useCallback(() => {\n        const newData = [...data, {value: EMPTY_VALUE, error: ''}];\n\n        onChange(newData);\n    }, [data, onChange]);\n\n\n    const onDelete = React.useCallback((index) => {\n        return () => {\n            const newData = [...data.slice(0, index), ...data.slice(index + 1)];\n\n            onChange(newData);\n        }\n    }, [data, onChange]);\n\n    return (\n        <Grid container direction={'column'}>\n            {data.map(({value, error}, index) => {\n                return (\n                    <Grid key={index} className={styles.input} container>\n                        <TextField placeholder={`${placeholderPrefix} ${index + 1}`}\n                                   value={value}\n                                   variant={'outlined'}\n                                   onChange={onValueChange(index)}\n                                   label={error || undefined}\n                                   error={Boolean(error)}\n                                   fullWidth\n                        />\n                        {index >= INITIAL_COUNT && (\n                            <CloseIcon className={styles.deleteIcon} onClick={onDelete(index)}/>\n                        )}\n                    </Grid>\n                );\n            })}\n            {addVisible && <Grid justify={'flex-end'} container item>\n                <Fab onClick={onAdd} color=\"primary\" aria-label=\"add\">\n                    <AddIcon />\n                </Fab>\n            </Grid>}\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                               maxCount={7}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport styles from \"./MatrixInput.module.css\";\nimport classNames from \"classnames\";\nimport {IField} from \"../../types\";\n\ninterface IMatrixInputProps {\n    className?: string;\n    title?: string;\n    labels: string[];\n    yLabels?: string[];\n    data: IField[][];\n    onFieldChange: (value: string, position: {i: number; j: number}) => void;\n}\n\nexport const MatrixInput: React.FC<IMatrixInputProps> = ({className, title, labels, yLabels, data, onFieldChange}) => {\n    const onValueChange = React.useCallback((i: number, j: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            onFieldChange(value, {i, j})\n        }\n    }, [onFieldChange]);\n\n    // const onBlur = React.useCallback((i: number, j: number) => {\n    //     return (e: FocusEvent<HTMLInputElement>) => {\n    //         onChange(e, i, j);\n    //     }\n    // }, []);\n\n    return (\n      <Grid className={className} direction={'column'}>\n          <Grid container item spacing={1}>\n              <>\n                  <Grid className={classNames(styles.item, styles.label)} item>\n                      <b className={styles.labelText}>{title}</b>\n                  </Grid>\n                  {labels.map((label, index) => {\n                      return (\n                          <Grid className={classNames(styles.item, styles.label)} key={`label-top-${index}`} item>\n                              <span className={styles.labelText}>{label}</span>\n                          </Grid>\n                      )\n                  })}\n              </>\n          </Grid>\n\n          {data.map((row, i) => {\n              return (\n                  <Grid key={`row-${i}`} container item spacing={1}>\n                      <Grid className={classNames(styles.item, styles.label)} key={`label-left-${i}`} item>\n                          <span className={styles.labelText}>{(yLabels && yLabels[i]) || labels[i]}</span>\n                      </Grid>\n\n                      {row.map(({value, error}, j) => {\n                          return (\n                              <Grid key={`item-${i}-${j}`} className={styles.item} item>\n                                  <TextField\n                                      value={value}\n                                      onChange={onValueChange(i, j)}\n                                      variant={'outlined'}\n                                      error={Boolean(error)}\n                                      disabled={!yLabels && i === j}\n                                      // onBlur={onBlur(i, j)}\n                                      fullWidth\n                                  />\n                              </Grid>\n                          )}\n                      )}\n                  </Grid>\n              )}\n          )}\n      </Grid>\n    );\n};\n","import {IField} from \"../types\";\n\nexport function parseMatrixes(matrixes: IField[][][]) {\n    return matrixes.map((matrix) => {\n        return matrix.map((row) => {\n            return row.map(({value}) => {\n                const match = value.match(/1\\/([1-9])/);\n\n                return match ? 1 / parseInt(match[1]) : parseInt(value, 10);\n            })\n        })\n    })\n}\n","export function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {red} from \"@material-ui/core/colors\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (criteriaMatrixes: number[][][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [alternativesMatrixes, setAlternativesMatrixes] = React.useState<IField[][][]>(() => {\n        return experts.map(() => {\n            return alternatives.map((_, i) => {\n                return alternatives.map((_, j) => {\n                    return {\n                        value: i === j ? '0' : EMPTY_VALUE,\n                        error: '',\n                    };\n                })\n            });\n        })\n\n    });\n\n    const onAlternativesMatrixItemChange = React.useCallback((index) => {\n        return (value: string, {i, j}: { i: number; j: number }) => {\n            const matches = value.match(/^1$|^-1$/);\n            const newData = [...alternativesMatrixes[index]];\n\n            if (value.match(/^[-1]*$/)) {\n                newData[i][j] = {\n                    value,\n                    error: !matches ? 'error' : '',\n                };\n\n                let oppositeValue = '';\n\n                if (matches) {\n                    if (matches[0] === '1') {\n                        oppositeValue = '-1';\n                    } else {\n                        oppositeValue = '1';\n                    }\n                }\n\n                newData[j][i] = {\n                    value: oppositeValue,\n                    error: '',\n                };\n\n                const newAlternativesMatrixes = [...alternativesMatrixes];\n                newAlternativesMatrixes[index] = newData;\n                setAlternativesMatrixes(newAlternativesMatrixes)\n            }\n        }\n    }, [alternativesMatrixes]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newAlternativesMatrixes = deepCopy<IField[][][]>(alternativesMatrixes);\n\n        newAlternativesMatrixes.forEach((matrix) => {\n            matrix.forEach((row) => {\n                row.forEach(({value}, index) => {\n                    const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                    let error = '';\n\n                    for (let validator of validators) {\n                        const currError = validator(value);\n\n                        if (currError) {\n                            error = currError;\n                            break;\n                        }\n                    }\n\n                    if (error) {\n                        row[index].error = error;\n\n                        isValid = false;\n                    }\n                });\n            });\n        })\n\n        setAlternativesMatrixes(newAlternativesMatrixes);\n\n        return isValid;\n    }, [alternativesMatrixes]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes(alternativesMatrixes));\n        }\n    }, [alternativesMatrixes, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицы попарного сравнения\n                <Tooltip arrow\n                         title={\n                            <span className={commonStyles.tooltipText}>Укажите значение 1, если альтернатива лучше, и значение -1, если хуже</span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon} />\n                </Tooltip>\n            </div>\n\n            {experts.map((expert, index) => {\n                return (\n                    <MatrixInput key={index} className={styles.matrix}\n                                 onFieldChange={onAlternativesMatrixItemChange(index)}\n                                 data={alternativesMatrixes[index]}\n                                 title={expert} labels={alternatives}/>\n                );\n            })}\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from \"react\";\nimport {Table, TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport styles from \"./Matrix.module.css\";\nimport classNames from \"classnames\";\n\ninterface IMatrixProps {\n    className?: string;\n    title?: string;\n    labels: string[];\n    yLabels?: string[];\n    data: number[][];\n}\n\nexport const Matrix: React.FC<IMatrixProps> = ({className, data, title, labels, yLabels}) => {\n    return (\n        <Table className={classNames(styles.table, className)}>\n            <TableBody>\n                <TableRow className={styles.row}>\n                    <TableCell className={styles.cell}>\n                        <b>{title}</b>\n                    </TableCell>\n                    {labels.map((label, index) => {\n                        return (\n                            <TableCell className={styles.cell} key={'row-label-' + index}>\n                                {label}\n                            </TableCell>\n                        )\n                    })}\n                </TableRow>\n\n                {data.map((row, i) => {\n                        return (\n                            <TableRow key={i} className={styles.row}>\n                                <TableCell className={styles.cell}>\n                                    {(yLabels && yLabels[i]) || labels[i]}\n                                </TableCell>\n\n                                {row.map((value, j) => {\n                                        return (\n                                            <TableCell className={styles.cell} key={`item-${i}-${j}`}>\n                                                {value}\n                                            </TableCell>\n                                        )\n                                    }\n                                )}\n                            </TableRow>\n                        )\n                    }\n                )}\n            </TableBody>\n        </Table>\n    );\n};\n","export function permutationToMatrix(perm: number[], size: number): number[][] {\n    const matrix = new Array(size).fill(0).map(_ => new Array(size).fill(0));\n\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = 0; j < matrix.length; j++) {\n            if (i === j) {\n                matrix[i][j] = 0;\n            } else if (i > j) {\n                matrix[i][j] = -matrix[j][i];\n            } else {\n                const index = (2 * size - i - 1) * i / 2 + j - i - 1;\n\n                matrix[i][j] = perm[index];\n            }\n        }\n    }\n\n    return matrix;\n}\n","import {permutations} from \"../../../../helpers/permutations\";\nimport {minIndexes} from \"../../../../helpers/array/minIndexes\";\nimport {permutationToMatrix} from \"./permutationToMatrix\";\n\nexport function getMedianMatrixes(matrixes: number[][][], size: number) {\n    return new Promise<{matrix: number[][]; coef: number[]}[]>((resolve) => {\n        const permutationsList: number[][] = permutations([-1, 1], size * (size - 1) / 2);\n\n        const coefficientsList = permutationsList.map((perm) => {\n            return matrixes.map((matrix) => {\n                const vector: number[] = [];\n\n                for (let i = 0; i < size - 1; i++) {\n                    for (let j = i + 1; j < size; j++) {\n                        vector.push(matrix[i][j]);\n                    }\n                }\n\n                return perm.reduce((acc, val, index) => {\n                    return acc + Math.abs(val - vector[index]);\n                }, 0);\n            })\n        });\n\n        const medianMatrixIndexes = minIndexes(coefficientsList.map((coefList) => {\n            return Math.sqrt(coefList.reduce((acc, item) => acc + item * item, 0));\n        }))\n\n        resolve(medianMatrixIndexes.map((index) => {\n            return {matrix: permutationToMatrix(permutationsList[index], size), coef: coefficientsList[index]};\n        }));\n    })\n}\n","export function permutations(arr: any[], size: number): any[][] {\n    const  results = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const  res = [arr[i]];\n\n        if (size === 1) {\n            results.push(res)\n        } else {\n            const rest = permutations(arr, size - 1);\n\n            for (let j = 0; j < rest.length; j++) {\n                results.push(res.concat(rest[j]))\n            }\n        }\n    }\n    return results\n}\n","export function minIndexes(arr: number[]): number[] {\n    let min = arr[0];\n    let minIndexes: number[] = [];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndexes = [i];\n        } else if (arr[i] === min) {\n            minIndexes.push(i);\n        }\n    }\n\n    return minIndexes;\n}\n","export function sum(arr: number[]) {\n    return arr.reduce((acc, item) => acc + item, 0)\n}\n","import {MatrixAxis} from \"../../constants\";\nimport {sum} from \"../array/sum\";\nimport nj from \"numjs\"\n\nexport function sumByAxis(matrix: number[][], axis: MatrixAxis): number[] {\n    const prepMatrix = axis === MatrixAxis.Column ? nj.array(matrix).T.tolist() : matrix;\n\n    return prepMatrix.map((row) => sum(row));\n}\n","export function sortByArray<T = string>(arr: T[], valueArr: number[]) {\n    return [...arr].sort((a, b) => {\n        const index1 = arr.indexOf(a);\n        const index2 = arr.indexOf(b);\n\n        return valueArr[index2] - valueArr[index1];\n    })\n}\n","import React from 'react';\n\nimport {CircularProgress} from \"@material-ui/core\";\nimport {Matrix} from \"../../Matrix/Matrix\";\nimport {getMedianMatrixes} from \"./helpers/getMedianMatrixes\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    alternativesData: number[][][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, alternativesData}) => {\n    const [medians, setMedians] = React.useState<{ matrix: number[][]; coef: number[] }[]>();\n\n    React.useEffect(() => {\n        getMedianMatrixes(alternativesData, alternatives.length)\n            .then((medians) => {\n                setMedians(medians);\n            })\n    })\n\n    return (\n        <div className={styles.container}>\n            {!medians ? (\n                <CircularProgress/>\n            ) : (\n                <>\n                    <div className={commonStyles.title}>\n                        Исходные матрицы\n                    </div>\n\n                    <div className={styles.matrixes}>\n                        {alternativesData.map((matrix, index) => {\n                            return (\n                                <Matrix key={'alternative-matrix-' + index} className={styles.matrix}\n                                        title={experts[index]} labels={alternatives} data={matrix}/>\n                            );\n                        })}\n                    </div>\n\n                    <div className={commonStyles.title}>\n                        Матрица(ы) с минимальным суммарным расстоянием до всех экспертных матриц\n                    </div>\n\n                    {medians.map(({matrix, coef}, matrixIndex) => {\n                        return (\n                            <div className={styles.median}>\n                                <Matrix key={'median-matrix-' + matrixIndex} className={styles.matrix}\n                                        labels={alternatives} data={matrix}/>\n\n                                <span>\n                                    Расстояние до экспертной матрицы\n                                    {coef.map((c, coefIndex) => {\n                                        return (\n                                            <span key={'coef-' + matrixIndex + coefIndex}>\n                                                {coefIndex !== 0 ? ',' : ''}\n                                                <b> \"{experts[coefIndex]}\"</b> = {c * 2}\n                                            </span>\n                                        );\n                                    })}\n                                </span>\n\n                            </div>\n                        );\n                    })}\n\n                    <div className={commonStyles.title}>\n                        Медиана Кемени-Снелла (ранжировка(и), наиболее точно удовлетворяющая всем экспертам)\n                    </div>\n\n                    {medians.map(({matrix}, matrixIndex) => {\n                        const sums = sumByAxis(matrix, MatrixAxis.Row);\n\n                        return (\n                            <div key={matrixIndex} className={styles.median}>\n                                <span>\n                                    {sortByArray(alternatives, sums).map((alternative, index) => {\n                                        return (\n                                            <b>\n                                                {index === 0 ? alternative : `, ${alternative}`}\n                                            </b>\n                                        );\n                                    })}\n                                </span>\n\n                            </div>\n                        );\n                    })}\n                </>\n            )}\n        </div>\n    );\n};\n","import React from 'react';\n\nimport {Form} from \"../Form/Form\";\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрицы попарного сравнения', 'Результаты'];\n\nexport const MDForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [alternativesData, setAlternativesData] = React.useState<number[][][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((alternativesData: number[][][]) => {\n        setAlternativesData(alternativesData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit}/>;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} alternativesData={alternativesData}/>;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, alternativesData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.MinimumDistance} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles}/>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], alternatives: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [criteria, setCriteria] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...criteria];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.CRITERIA];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setCriteria(newCriteria);\n\n        const newAlternatives = [...alternatives];\n\n        newAlternatives.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newAlternatives[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newAlternatives);\n\n        return isValid;\n    }, [criteria, alternatives]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = criteria.map(({value}) => value);\n            const alternativesValues = alternatives.map(({value}) => value);\n\n            onSubmit(criteriaValues, alternativesValues);\n        }\n    }, [alternatives, criteria, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия критериев и альтернатив\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.CRITERIA} data={criteria} onChange={setCriteria}\n                               placeholderPrefix={'Критерий'}\n                               maxCount={10}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                               maxCount={10}\n                    />\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    criteria: string[];\n    alternatives: string[];\n    onSubmit: (criteriaMatrix: number[][], alternativesMatrixes: number[][][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({criteria, alternatives, onSubmit}) => {\n    const [criteriaMatrix, setCriteriaMatrix] = React.useState<IField[][]>(() => {\n        return criteria.map((_, i) => {\n            return criteria.map((_, j) => {\n                return {\n                    value: i === j ? '1' : EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        });\n    });\n\n    const [alternativesMatrixes, setAlternativesMatrixes] = React.useState<IField[][][]>(() => {\n        return criteria.map(() => {\n            return alternatives.map((_, i) => {\n                return alternatives.map((_, j) => {\n                    return {\n                        value: i === j ? '1' : EMPTY_VALUE,\n                        error: '',\n                    };\n                })\n            });\n        })\n\n    });\n\n    const onCriteriaMatrixItemChange = React.useCallback((value: string, {i, j}: {i: number; j: number}) => {\n        const matches = value.match(/^([1-9])$|^1\\/([2-9])$/);\n        const newData = [...criteriaMatrix];\n\n        if (value.match(/^[1-9/]*$/)) {\n            newData[i][j] = {\n                value,\n                error: !matches ? 'error' : '',\n            };\n\n            let oppositeValue = '';\n\n            if (matches) {\n                if (matches[2]) {\n                    oppositeValue = `${matches[2]}`;\n                } else if (matches[1] === '1') {\n                    oppositeValue = '1';\n                } else {\n                    oppositeValue = `1/${matches[1]}`;\n                }\n            }\n\n            newData[j][i] = {\n                value: oppositeValue,\n                error: '',\n            };\n\n            setCriteriaMatrix(newData);\n        }\n    }, [criteriaMatrix])\n\n    const onAlternativesMatrixItemChange = React.useCallback((index) => {\n        return (value: string, {i, j}: {i: number; j: number}) => {\n            const matches = value.match(/^([1-9])$|^1\\/([2-9])$/);\n            const newData = [...alternativesMatrixes[index]];\n\n            if (value.match(/^[1-9/]*$/)) {\n                newData[i][j] = {\n                    value,\n                    error: !matches ? 'error' : '',\n                };\n\n                let oppositeValue = '';\n\n                if (matches) {\n                    if (matches[2]) {\n                        oppositeValue = `${matches[2]}`;\n                    } else if (matches[1] === '1') {\n                        oppositeValue = '1';\n                    } else {\n                        oppositeValue = `1/${matches[1]}`;\n                    }\n                }\n\n                newData[j][i] = {\n                    value: oppositeValue,\n                    error: '',\n                };\n            }\n\n            const newAlternativesMatrixes = [...alternativesMatrixes];\n            newAlternativesMatrixes[index] = newData;\n            setAlternativesMatrixes(newAlternativesMatrixes)\n        }\n    }, [alternativesMatrixes]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteriaMatrix = [...criteriaMatrix];\n\n        newCriteriaMatrix.forEach((row, i) => {\n            row.forEach(({value}, j) => {\n                const validators = fieldsValidators[FORM_FIELDS.CRITERIA_MATRIX];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    newCriteriaMatrix[i][j].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setCriteriaMatrix(newCriteriaMatrix);\n\n        const newAlternativesMatrixes = deepCopy<IField[][][]>(alternativesMatrixes);\n\n        newAlternativesMatrixes.forEach((matrix) => {\n            matrix.forEach((row) => {\n                row.forEach(({value}, index) => {\n                    const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                    let error = '';\n\n                    for (let validator of validators) {\n                        const currError = validator(value);\n\n                        if (currError) {\n                            error = currError;\n                            break;\n                        }\n                    }\n\n                    if (error) {\n                        row[index].error = error;\n\n                        isValid = false;\n                    }\n                });\n            });\n        })\n\n        setAlternativesMatrixes(newAlternativesMatrixes);\n\n        return isValid;\n    }, [alternativesMatrixes, criteriaMatrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([criteriaMatrix])[0], parseMatrixes(alternativesMatrixes));\n        }\n    }, [alternativesMatrixes, criteriaMatrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Попарно сравните критерии и альтернативы между собой, указав степень важности согласно таблице\n            </div>\n\n            <Table className={styles.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Уровни важности</TableCell>\n                        <TableCell>Количественное значение</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>Равная важность</TableCell>\n                        <TableCell>1</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Немного лучше (хуже)</TableCell>\n                        <TableCell>3 (1/3)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Лучше (хуже)</TableCell>\n                        <TableCell>5 (1/5)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Значительно лучше (хуже)</TableCell>\n                        <TableCell> 7 (1/7)</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Принципиально лучше (хуже)</TableCell>\n                        <TableCell>9 (1/9)</TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n\n            <div className={commonStyles.title}>\n                Критерии\n            </div>\n\n            <MatrixInput className={styles.matrix} onFieldChange={onCriteriaMatrixItemChange} data={criteriaMatrix} labels={criteria}/>\n\n            <div className={commonStyles.title}>\n                Альтернативы\n            </div>\n\n            {criteria.map((cr, index) => {\n                return (\n                    <MatrixInput key={index} className={styles.matrix}\n                                 onFieldChange={onAlternativesMatrixItemChange(index)} data={alternativesMatrixes[index]}\n                                 title={cr} labels={alternatives}/>\n                );\n            })}\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import {sumByAxis} from \"./sumByAxis\";\nimport {divideByAxis} from \"./divideByAxis\";\nimport {MatrixAxis} from \"../../constants\";\n\nexport function reduce(matrix: number[][]): number[] {\n    const sumColumnMatrix = sumByAxis(matrix, MatrixAxis.Column)\n    const divColumnMatrix = divideByAxis(matrix, sumColumnMatrix.map((value) => value * matrix[0].length), MatrixAxis.Column)\n    return sumByAxis(divColumnMatrix, MatrixAxis.Row);\n}\n","import nj from \"numjs\";\nimport {MatrixAxis} from \"../../constants\";\n\nexport function divideByAxis(matrix: number[][], divider: number[], axis: MatrixAxis): number[][] {\n    const prepMatrix = axis === MatrixAxis.Column ? nj.array(matrix).T.tolist() : matrix;\n    const resultMatrix = prepMatrix.map((row, index) => row.map((item) => item / divider[index]));\n\n    return axis === MatrixAxis.Column ? nj.array(resultMatrix).T.tolist() : resultMatrix;\n}\n","export function transpose(matrix: number[][]): number[][] {\n    const newMatrix: number[][] = [];\n\n    matrix.forEach((row, i) => {\n        if (i === 0) {\n            row.forEach(() => newMatrix.push([]));\n        }\n\n        row.forEach((item, j) => {\n            newMatrix[j].push(item);\n        })\n    })\n\n    return newMatrix;\n}\n\n// [[1, 2]] -> [[1], [2]]\n","import {Button, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport styles from \"./MethodsAccordion.module.css\";\nimport {useHistory} from \"react-router-dom\";\nimport {RouteByMethod} from \"../../routes\";\nimport {Methods, MethodsByType, MethodsType} from \"../../constants\";\n\nexport enum MethodAccordionType {\n    Group,\n    Individual,\n    All,\n}\n\nconst DESCRIPTIONS = {\n    [Methods.AnalyticHierarchyProcess]: \"Метод аналитических иерархий относится к категории индивидуальных методов принятия решений. Суть метода заключается в вычислении ценности каждой альтернативы, путем оценки критериев между собой и сравнения альтернатив по заданным критериям.\",\n    [Methods.MinimumDistance]: \"Метод минимального расстояния относится к категории групповых методов принятия решений. Метод основан на анализе ранжировок альтернатив, заданных экспертами.\",\n    [Methods.Preference]: \"Метод предпочтений относится к категории групповых методов принятия решений. Метод основан на присвоении ранга альтернативе каждым экспертом.\",\n    [Methods.Rang]: \"Метод ранга относится к категории групповых методов принятия решений. Метод основан на балльных оценках альтернатив, указываемых несколькими экспертами.\",\n    [Methods.LexicographicSemiOrdering]: \"Метод лексикографического полуупорядочивания относится к категории индивидуальных методов принятия решений. Метод основан на количественной оценке каждой альтернативы.\",\n}\n\ninterface IMethodAccordionProps {\n    type: MethodAccordionType;\n    className?: string;\n}\n\nexport const MethodAccordion: React.FC<IMethodAccordionProps> = ({type, className}) => {\n    const history = useHistory();\n\n    const onClick = React.useCallback((method: Methods) => () => {\n        history.push(RouteByMethod[method]);\n    }, [history]);\n\n    return (\n        <div className={className}>\n            {Object.values(Methods)\n                .filter((method) => {\n                    if (type === MethodAccordionType.Individual) {\n                        return MethodsByType[MethodsType.Individual].includes(method);\n                    } else if (type === MethodAccordionType.Group) {\n                        return MethodsByType[MethodsType.Group].includes(method);\n                    }\n\n                    return true;\n                })\n                .map((method, index) => {\n                    return (\n                        <ExpansionPanel key={index}>\n                            <ExpansionPanelSummary\n                                expandIcon={<ExpandMoreIcon />}\n                            >\n                                {method}\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails className={styles.detail}>\n                                <Typography color=\"textSecondary\">\n                                    {DESCRIPTIONS[method]}\n                                </Typography>\n\n                                {method !== Methods.LexicographicSemiOrdering && (\n                                    <Button\n                                        className={styles.button}\n                                        key={index}\n                                        variant=\"contained\" color=\"primary\"\n                                        size=\"medium\"\n                                        onClick={onClick(method)}\n                                    >\n                                        Рассчитать\n                                    </Button>\n                                )}\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    );\n                })\n            }\n        </div>\n    );\n};\n\n","import React from 'react';\n\nimport {Grid, Table, TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport {reduce} from \"../../../helpers/matrix/reduce\";\nimport {multiply} from \"../../../helpers/matrix/multiply\";\nimport {transpose} from \"../../../helpers/matrix/transpose\";\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\n\ninterface IFormStep3Props {\n    criteria: string[];\n    alternatives: string[];\n    criteriaData: number[][];\n    alternativesData: number[][][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({criteria, alternatives, criteriaData, alternativesData}) => {\n    const criteriaNorm = reduce(criteriaData);\n    const matrixData = transpose(alternativesData.map((matrix) => reduce(matrix)));\n    const alternativesNorm = transpose(multiply(matrixData, transpose([criteriaNorm])))[0];\n    const sortedAlternatives = sortByArray(alternatives, alternativesNorm);\n    const optimal = sortedAlternatives[0];\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"center\">\n            <div className={commonStyles.title}>\n                В результате сформирован вектор весов критериев и матрица весов альтернатив\n            </div>\n\n            <Grid justify={'space-between'} alignItems={\"center\"} container>\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell>\n                                <b>Вес в долях</b>\n                            </TableCell>\n                        </TableRow>\n\n                        {criteria.map((criterion, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <b>{criterion}</b>\n                                    </TableCell>\n                                    <TableCell>\n                                        {criteriaNorm[index].toFixed(2)}\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n\n                <ArrowRightAltIcon />\n\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n\n                            {criteria.map((criterion, index) => {\n                                return (\n                                    <TableCell key={index}>\n                                        <b>{criterion}</b>\n                                    </TableCell>\n                                );\n                            })}\n                        </TableRow>\n\n                        {alternatives.map((alternative, i) => {\n                            return (\n                                <TableRow key={i}>\n                                    <TableCell>\n                                        <b>{alternative}</b>\n                                    </TableCell>\n\n                                    {criteria.map((_, j) => {\n                                        return (\n                                            <TableCell key={`${i} + ${j}`}>\n                                                {matrixData[i][j].toFixed(2)}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n\n                <ArrowRightAltIcon />\n\n                <Table className={styles.tableThin}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell>\n                                <b>Вес в долях</b>\n                            </TableCell>\n                        </TableRow>\n\n                        {alternatives.map((alternative, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <b>{alternative}</b>\n                                    </TableCell>\n                                    <TableCell>\n                                        {alternativesNorm[index].toFixed(2)}\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        )}\n                    </TableBody>\n                </Table>\n            </Grid>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div className={styles.info}>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n\n            <div>\n                Оптимальная альтернатива - <b>{optimal}</b>\n            </div>\n        </Grid>\n    );\n};\n","export function multiply (matrix1: number[][], matrix2: number[][]) {\n    const result = new Array(matrix1.length).fill(0).map(_ => new Array(matrix2[0].length).fill(0));\n\n    return result.map((row, i) => {\n        return row.map((_, j) => {\n            return matrix1[i].reduce((sum, elm, k) => sum + (elm * matrix2[k][j]) ,0)\n        })\n    })\n}\n","import React from 'react';\n\nimport {Form} from \"../Form/Form\";\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Критерии и альтернативы', 'Матрицы попарного сравнения', 'Результаты'];\n\nexport const AHPForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [criteria, setCriteria] = React.useState<string[]>([]);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [criteriaData, setCriteriaData] = React.useState<number[][]>([]);\n    const [alternativesData, setAlternativesData] = React.useState<number[][][]>([]);\n\n    const onStep1Submit = React.useCallback((criteria: string[], alternatives: string[]) => {\n        setCriteria(criteria);\n        setAlternatives(alternatives);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((criteriaData: number[][], alternativesData: number[][][]) => {\n        setCriteriaData(criteriaData);\n        setAlternativesData(alternativesData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 criteria={criteria} alternatives={alternatives} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 criteria={criteria} alternatives={alternatives} alternativesData={alternativesData} criteriaData={criteriaData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, alternativesData, criteria, criteriaData, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.AnalyticHierarchyProcess} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (matrix: number[][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [matrix, setMatrix] = React.useState<IField[][]>(() => {\n        return experts.map(() => {\n            return alternatives.map(() => {\n                return {\n                    value: EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        })\n    });\n\n    const onMatrixItemChange = React.useCallback((value: string, {i, j}: { i: number; j: number }) => {\n        const newData = [...matrix];\n\n        if (value.match(/^[1-9]*$/)) {\n            const parsedValue = parseInt(value, 10);\n\n            newData[i][j] = {\n                value,\n                error: parsedValue < 1 || parsedValue > alternatives.length ? 'error' : '',\n            };\n\n            setMatrix(newData)\n        }\n    }, [alternatives.length, matrix]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newData = deepCopy<IField[][]>(matrix);\n\n        newData.forEach((row) => {\n            row.forEach(({value}, index) => {\n                const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    row[index].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setMatrix(newData);\n\n        return isValid;\n    }, [matrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([matrix])[0]);\n        }\n    }, [matrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицу предпочтений\n                <Tooltip arrow\n                         title={\n                             <span className={commonStyles.tooltipText}>\n                                 Укажите значение от 1 до {alternatives.length}, наиболее важной альтернативе присваивается значение 1\n                             </span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon}/>\n                </Tooltip>\n            </div>\n\n            <MatrixInput className={styles.matrix}\n                         onFieldChange={onMatrixItemChange}\n                         data={matrix}\n                         labels={alternatives}\n                         yLabels={experts}\n            />\n\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Matrix} from \"../../Matrix/Matrix\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {map} from \"../../../helpers/matrix/map\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\nimport {sum} from \"../../../helpers/array/sum\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    matrixData: number[][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, matrixData}) => {\n    const modifiedMatrix = map(matrixData, (value) => {\n        return alternatives.length - value;\n    })\n\n    const columnSums = sumByAxis(matrixData, MatrixAxis.Column);\n    const fullSum = sum(columnSums);\n    const weights = columnSums.map((value) => value / fullSum);\n\n    const sortedAlternatives = sortByArray(alternatives, weights);\n\n    return (\n        <div className={styles.container}>\n            <div className={commonStyles.title}>\n                Модифицированная матрица предпочтений\n            </div>\n\n            <Matrix className={styles.matrix} labels={alternatives} yLabels={experts} data={modifiedMatrix}/>\n\n            <div className={commonStyles.title}>\n                Веса альтернатив\n            </div>\n\n            <span className={styles.info}>\n                {weights.map((w, weightIndex) => {\n                    return (\n                        <span key={weightIndex}>\n                            {weightIndex !== 0 ? ',' : ''} <b>\"{alternatives[weightIndex]}\"</b> = {w.toFixed(2)}\n                        </span>\n                    );\n                })}\n            </span>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n","import React, {ChangeEvent} from 'react';\n\nimport {Button, Fab, Grid, IconButton, InputLabel, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport {IField} from \"../../../types\";\n\nimport styles from \"./FormStep1.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nenum CriteriaType {\n    String = 'Множество',\n    Number = 'Число',\n}\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\nconst emptyCriteria = {\n    name: {\n        value: EMPTY_VALUE,\n        error: '',\n    },\n    type: CriteriaType.String,\n    lookup: [\n        {\n            value: EMPTY_VALUE,\n            error: '',\n        }\n    ]\n}\n\nexport interface ICriteriaData {\n    name: IField;\n    type: CriteriaType,\n    lookup?: IField[],\n}\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: ICriteriaData[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [criteria, setCriteria] = React.useState<ICriteriaData[]>(new Array(INITIAL_COUNT).fill(emptyCriteria));\n\n    // const validate = React.useCallback(() => {\n    //     let isValid = true;\n    //     const newCriteria = [...alternatives];\n    //\n    //     newCriteria.forEach(({value}, index) => {\n    //         const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n    //         let error = '';\n    //\n    //         for (let validator of validators) {\n    //             const currError = validator(value);\n    //\n    //             if (currError) {\n    //                 error = currError;\n    //                 break;\n    //             }\n    //         }\n    //\n    //         if (error) {\n    //             newCriteria[index].error = error;\n    //\n    //             isValid = false;\n    //         }\n    //     });\n    //\n    //     setAlternatives(newCriteria);\n    //\n    //     return isValid;\n    // }, [alternatives, experts]);\n    //\n    // const onStepSubmit = React.useCallback(() => {\n    //     const isValid = validate();\n    //\n    //     if (isValid) {\n    //         const criteriaValues = alternatives.map(({value}) => value);\n    //         const expertsValues = experts.map(({value}) => value);\n    //\n    //         onSubmit(criteriaValues, expertsValues);\n    //     }\n    // }, [experts, alternatives, onSubmit, validate]);\n\n    const onCriteriaNameChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = deepCopy(criteria);\n            const error = value ? '' : 'Это поле обязательно';\n\n            newData[index].name = {value, error};\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaTypeChange = React.useCallback((index: number) => {\n        return (e: ChangeEvent<{value: unknown}>) => {\n            const value = e.target.value;\n            const newData = deepCopy(criteria);\n\n            newData[index].type = value as CriteriaType;\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaLookupChange = React.useCallback((i: number, j: number) => {\n        return (e: ChangeEvent<HTMLInputElement>) => {\n            const value = e.currentTarget.value;\n            const newData = deepCopy(criteria);\n            const error = value ? '' : 'Это поле обязательно';\n\n            if (newData[i].lookup) {\n                // @ts-ignore\n                newData[i].lookup[j] = {value, error};\n            }\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaAdd = React.useCallback(() => {\n        const newData = [...criteria, emptyCriteria];\n\n        setCriteria(newData);\n    }, [criteria]);\n\n\n    const onCriteriaDelete = React.useCallback((index) => {\n        return () => {\n            const newData = [...criteria.slice(0, index), ...criteria.slice(index + 1)];\n\n            setCriteria(newData);\n        }\n    }, [criteria]);\n\n    const onCriteriaValueAdd = React.useCallback((index: number) => {\n        return () => {\n            const newData = deepCopy(criteria);\n\n            if (newData[index].lookup) {\n                // @ts-ignore\n                newData[index].lookup.push({value: '', error: ''});\n            }\n\n            setCriteria(newData);\n        }\n    }, [criteria])\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите критерии\n            </div>\n\n            <div className={styles.list}>\n                {criteria.map(({name: {value, error}, type, lookup}, index) => {\n                    return (\n                        <div key={index} className={styles.criteria}>\n                            {index >= INITIAL_COUNT && (\n                                <CloseIcon className={styles.deleteIcon} onClick={onCriteriaDelete(index)}/>\n                            )}\n\n                            <div className={styles.field}>\n                                <InputLabel className={styles.label}>Название</InputLabel>\n                                <TextField placeholder={`Критерий ${index + 1}`}\n                                           value={value}\n                                           variant={'outlined'}\n                                           onChange={onCriteriaNameChange(index)}\n                                           label={error || undefined}\n                                           error={Boolean(error)}\n                                           fullWidth\n                                />\n                            </div>\n\n                            <div className={styles.field}>\n                                <InputLabel className={styles.label}>Тип</InputLabel>\n                                <Select\n                                    value={type}\n                                    onChange={onCriteriaTypeChange(index)}\n                                    fullWidth\n                                >\n                                    {Object.values(CriteriaType).map((type, index) => {\n                                        return (\n                                            <MenuItem key={index} value={type}>{type}</MenuItem>\n                                        );\n                                    })}\n                                </Select>\n                            </div>\n\n                            {type === CriteriaType.String && (\n                                <div className={styles.field}>\n                                    <InputLabel className={styles.label}>Значения</InputLabel>\n\n                                    {lookup && lookup.map(({value, error}, jndex) => {\n                                        return (\n                                            <TextField\n                                                className={styles.value}\n                                                key={jndex}\n                                                placeholder={`Значение ${jndex + 1}`}\n                                                value={value}\n                                                variant={'outlined'}\n                                                onChange={onCriteriaLookupChange(index, jndex)}\n                                                label={error || undefined}\n                                                error={Boolean(error)}\n                                                fullWidth\n                                            />\n                                        );\n                                    })}\n\n                                    <IconButton className={styles.addValueButton} size=\"small\" onClick={onCriteriaValueAdd(index)} color=\"default\" aria-label=\"add\">\n                                        <AddIcon />\n                                    </IconButton>\n                                </div>\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n\n\n            <Grid className={commonStyles.submit} justify=\"space-between\" container>\n                <Button onClick={onCriteriaAdd} startIcon={<AddIcon />} size=\"large\" variant=\"contained\" color=\"default\">\n                    Добавить критерий\n                </Button>\n                <Button size=\"large\" variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","export function map<T = number>(matrix: T[][], fn: (value: T, i: number, j: number) => T) {\n    return matrix.map((row, i) => {\n        return row.map((value, j) => {\n            return fn(value, i, j);\n        })\n    })\n}\n","import React from 'react';\n\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\n\nimport {Form} from \"../Form/Form\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрица предпочтений', 'Результаты'];\n\nexport const PreferenceForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [matrixData, setMatrixData] = React.useState<number[][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((matrixData: number[][]) => {\n        setMatrixData(matrixData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} matrixData={matrixData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, matrixData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.Preference} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid} from \"@material-ui/core\";\nimport {ListInput} from \"../../ListInput/ListInput\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\nconst INITIAL_COUNT = 2;\n\ninterface IFormStep1Props {\n    onSubmit: (criteria: string[], experts: string[]) => void;\n}\n\nexport const FormStep1: React.FC<IFormStep1Props> = ({onSubmit}) => {\n    const [alternatives, setAlternatives] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n    const [experts, setExperts] = React.useState<IField[]>(new Array(INITIAL_COUNT).fill({\n        value: EMPTY_VALUE,\n        error: ''\n    }));\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n        const newCriteria = [...alternatives];\n\n        newCriteria.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.EXPERTS];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newCriteria[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setAlternatives(newCriteria);\n\n        const newExperts = [...experts];\n\n        newExperts.forEach(({value}, index) => {\n            const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES];\n            let error = '';\n\n            for (let validator of validators) {\n                const currError = validator(value);\n\n                if (currError) {\n                    error = currError;\n                    break;\n                }\n            }\n\n            if (error) {\n                newExperts[index].error = error;\n\n                isValid = false;\n            }\n        });\n\n        setExperts(newExperts);\n\n        return isValid;\n    }, [alternatives, experts]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            const criteriaValues = alternatives.map(({value}) => value);\n            const expertsValues = experts.map(({value}) => value);\n\n            onSubmit(criteriaValues, expertsValues);\n        }\n    }, [experts, alternatives, onSubmit, validate]);\n\n    return (\n        <Grid container>\n            <div className={commonStyles.title}>\n                Введите названия альтернатив и экспертов\n            </div>\n\n            <Grid justify={'space-between'} container>\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.ALTERNATIVES} data={alternatives} onChange={setAlternatives}\n                               placeholderPrefix={'Альтернатива'}\n                    />\n                </Grid>\n\n                <Grid container item xs={5}>\n                    <ListInput name={FORM_FIELDS.EXPERTS} data={experts} onChange={setExperts}\n                               placeholderPrefix={'Эксперт'}/>\n                </Grid>\n            </Grid>\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Button, Grid, Tooltip} from \"@material-ui/core\";\nimport {MatrixInput} from \"../../MatrixInput/MatrixInput\";\nimport {parseMatrixes} from \"../../../helpers/parseMatrixes\";\nimport {IField} from \"../../../types\";\nimport {fieldsValidators} from \"../../../validators/fieldsValidators\";\nimport {deepCopy} from \"../../../helpers/object/deepCopy\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {FORM_FIELDS} from \"../../../constants\";\n\nconst EMPTY_VALUE = '';\n\ninterface IFormStep1Props {\n    alternatives: string[];\n    experts: string[];\n    onSubmit: (matrix: number[][]) => void;\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({alternatives, experts, onSubmit}) => {\n    const [matrix, setMatrix] = React.useState<IField[][]>(() => {\n        return experts.map(() => {\n            return alternatives.map(() => {\n                return {\n                    value: EMPTY_VALUE,\n                    error: '',\n                };\n            })\n        })\n    });\n\n    const onMatrixItemChange = React.useCallback((value: string, {i, j}: { i: number; j: number }) => {\n        const newData = [...matrix];\n\n        if (value.match(/^[0-9]*$/)) {\n            const parsedValue = parseInt(value, 10);\n\n            newData[i][j] = {\n                value,\n                error: parsedValue < 1 || parsedValue > 10 ? 'error' : '',\n            };\n\n            setMatrix(newData)\n        }\n    }, [matrix]);\n\n    const validate = React.useCallback(() => {\n        let isValid = true;\n\n        const newData = deepCopy<IField[][]>(matrix);\n\n        newData.forEach((row) => {\n            row.forEach(({value}, index) => {\n                const validators = fieldsValidators[FORM_FIELDS.ALTERNATIVES_MATRIXES];\n                let error = '';\n\n                for (let validator of validators) {\n                    const currError = validator(value);\n\n                    if (currError) {\n                        error = currError;\n                        break;\n                    }\n                }\n\n                if (error) {\n                    row[index].error = error;\n\n                    isValid = false;\n                }\n            });\n        });\n\n        setMatrix(newData);\n\n        return isValid;\n    }, [matrix]);\n\n    const onStepSubmit = React.useCallback(() => {\n        const isValid = validate();\n\n        if (isValid) {\n            onSubmit(parseMatrixes([matrix])[0]);\n        }\n    }, [matrix, onSubmit, validate]);\n\n    return (\n        <Grid container justify={'center'}>\n            <div className={commonStyles.title}>\n                Заполните матрицу\n                <Tooltip arrow\n                         title={\n                             <span className={commonStyles.tooltipText}>\n                                 Укажите значение от 1 до 10, наиболее важной альтернативе присваивается значение 10\n                             </span>\n                         }\n                >\n                    <HelpOutlineIcon className={styles.icon}/>\n                </Tooltip>\n            </div>\n\n            <MatrixInput className={styles.matrix}\n                         onFieldChange={onMatrixItemChange}\n                         data={matrix}\n                         labels={alternatives}\n                         yLabels={experts}\n            />\n\n\n            <Grid className={commonStyles.submit} justify={'flex-end'} container>\n                <Button size=\"large\" onClick={onStepSubmit} variant=\"contained\" color=\"primary\">\n                    Далее\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\n\nimport {Matrix} from \"../../Matrix/Matrix\";\n\nimport styles from \"./FormSteps.module.css\";\nimport commonStyles from \"../../../common.module.css\";\nimport {map} from \"../../../helpers/matrix/map\";\nimport {sumByAxis} from \"../../../helpers/matrix/sumByAxis\";\nimport {MatrixAxis} from \"../../../constants\";\nimport {sum} from \"../../../helpers/array/sum\";\nimport {sortByArray} from \"../../../helpers/array/sortByArray\";\n\ninterface IFormStep3Props {\n    experts: string[];\n    alternatives: string[];\n    matrixData: number[][];\n}\n\nexport const FormStep3: React.FC<IFormStep3Props> = ({experts, alternatives, matrixData}) => {\n    const columnSums = sumByAxis(matrixData, MatrixAxis.Column);\n    const fullSum = sum(columnSums);\n    const weights = columnSums.map((value) => value / fullSum);\n\n    const sortedAlternatives = sortByArray(alternatives, weights);\n\n    return (\n        <div className={styles.container}>\n            <div className={commonStyles.title}>\n                Веса альтернатив\n            </div>\n\n            <span className={styles.info}>\n                {weights.map((w, weightIndex) => {\n                    return (\n                        <span key={weightIndex}>\n                            {weightIndex !== 0 ? ',' : ''} <b>\"{alternatives[weightIndex]}\"</b> = {w.toFixed(2)}\n                        </span>\n                    );\n                })}\n            </span>\n\n            <div className={commonStyles.title}>\n                Ранжирование альтернатив\n            </div>\n\n            <div>\n                {sortedAlternatives.map((alternative, index) => {\n                    return (\n                        <b>\n                            {index === 0 ? alternative : `, ${alternative}`}\n                        </b>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nimport {FormStep1} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {FormStep3} from \"./FormStep3\";\n\nimport {Form} from \"../Form/Form\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Альтернативы и эксперты', 'Матрица оценок', 'Результаты'];\n\nexport const RangForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [alternatives, setAlternatives] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [matrixData, setMatrixData] = React.useState<number[][]>([]);\n\n    const onStep1Submit = React.useCallback((alternatives: string[], experts: string[]) => {\n        setAlternatives(alternatives);\n        setExperts(experts);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const onStep2Submit = React.useCallback((matrixData: number[][]) => {\n        setMatrixData(matrixData);\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 1:\n                return <FormStep1 onSubmit={onStep1Submit} />;\n            case 2:\n                return <FormStep2 alternatives={alternatives} experts={experts} onSubmit={onStep2Submit}/>;\n            case 3:\n                return <FormStep3 alternatives={alternatives} experts={experts} matrixData={matrixData} />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternatives, matrixData, experts, onStep1Submit, onStep2Submit, step]);\n\n    return (\n        <Form method={Methods.Rang} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles} />\n    );\n};\n","import React, {ChangeEvent} from \"react\";\nimport {Slider, TextField} from \"@material-ui/core\";\n\nimport styles from \"./RangeInput.module.css\"\n\ninterface RangeInputProps {\n    value?: (number | \"\")[];\n    onChange: (value: (number | \"\")[]) => void;\n}\n\nexport const RangeInput: React.FC<RangeInputProps> = ({value = [\"\", \"\"], onChange}) => {\n    const onInputChange = React.useCallback((index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n        const itemValue = event.target.value;\n        const newValue = [...value.slice(0, index), itemValue && Number(itemValue), ...value.slice(index + 1)]\n\n        onChange(newValue);\n    }, [onChange, value])\n\n    // const onSliderChange = React.useCallback((_e: React.ChangeEvent<{}>, sliderValue: number | number[]) => {\n    //     let newValue: (number | \"\")[];\n    //\n    //     if (value[0]) {\n    //         if (value[1]) {\n    //             newValue = sliderValue as number[];\n    //         } else {\n    //             newValue = [sliderValue as number, value[1]]\n    //         }\n    //     } else {\n    //         if (value[1]) {\n    //             newValue = [value[0], sliderValue as number];\n    //         } else {\n    //             newValue = [\"\", \"\"];\n    //         }\n    //     }\n    //\n    //     onChange(newValue);\n    // }, [onChange, value])\n    //\n    // let sliderValue: number | number[] | undefined;\n    // let minValue: number | undefined;\n    // let maxValue: number | undefined;\n    //\n    // if (value[0]) {\n    //     if (value[1]) {\n    //         sliderValue = value as number[];\n    //         minValue = value[0] - 10;\n    //         maxValue = value[1] + 10;\n    //     } else {\n    //         sliderValue = value[0]\n    //         minValue = value[0] - 10;\n    //         maxValue = value[0] + 10;\n    //     }\n    // } else {\n    //     if (value[1]) {\n    //         sliderValue = value[1];\n    //         minValue = value[1] - 10;\n    //         maxValue = value[1] + 10;\n    //     } else {\n    //         sliderValue = 0;\n    //     }\n    // }\n\n    return (\n        <div className={styles.container}>\n            {/*<Slider*/}\n            {/*    value={sliderValue}*/}\n            {/*    onChange={onSliderChange}*/}\n            {/*    max={maxValue}*/}\n            {/*    min={minValue}*/}\n            {/*/>*/}\n            <div className={styles.inputs}>\n                <span className={styles.divider}>от</span>\n\n                <TextField\n                    type=\"number\"\n                    value={value[0]}\n                    onChange={onInputChange(0)}\n                />\n\n                <span className={styles.divider}>–</span>\n\n                <span className={styles.divider}>до</span>\n\n                <TextField\n                    type=\"number\"\n                    value={value[1]}\n                    onChange={onInputChange(1)}\n                />\n            </div>\n        </div>\n    );\n}\n","import {MTableFilterRow} from \"material-table\";\nimport React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport {RangeInput} from \"../../../RangeInput/RangeInput\";\n\nexport class MyTableFilterRow extends MTableFilterRow {\n    renderNumberTypeFilter(columnDef) {\n        console.log(columnDef)\n        return (\n            <RangeInput value={columnDef.tableData.filterValue}\n                        onChange={(newValue) => this.props.onFilterChanged(columnDef.tableData.id, newValue)}\n            />\n            // <Slider\n            //     value={columnDef.tableData.filterValue || [100, 102]}\n            //     onChange={(_event, newValue) => this.props.onFilterChanged(columnDef.tableData.id, newValue)}\n            //     valueLabelDisplay=\"auto\"\n            // />\n        );\n    }\n\n    getComponentForColumn(columnDef) {\n        if (columnDef.filtering === false) {\n            return null;\n        }\n\n        if (columnDef.field || columnDef.customFilterAndSearch) {\n            if (columnDef.filterComponent) {\n                return this.renderFilterComponent(columnDef);\n            } else if (columnDef.lookup) {\n                return this.renderLookupFilter(columnDef);\n            } else if (columnDef.type === 'boolean') {\n                return this.renderBooleanFilter(columnDef);\n            } else if (['date', 'datetime', 'time'].includes(columnDef.type)) {\n                return this.renderDateTypeFilter(columnDef);\n            } else if (columnDef.type === 'numeric') {\n                return this.renderNumberTypeFilter(columnDef);\n            } else {\n                return this.renderDefaultFilter(columnDef);\n            }\n        }\n    }\n}\n","import React from 'react';\n\nimport {MyTableFilterRow} from \"./MyTableFilterRow/MyTableFilterRow\";\nimport MaterialTable from \"material-table\";\n\ninterface IFormStep1Props {\n}\n\nexport const FormStep2: React.FC<IFormStep1Props> = ({}) => {\n    return (\n        <MaterialTable\n            title=\"Введите альтернативы, указав соответствующие значения для каждого критерия\"\n            columns={[\n                { title: 'Название альтернативы', field: 'Альтернатива', filtering: false },\n                {\n                    title: 'Цена',\n                    field: 'Цена',\n                    type: 'numeric',\n                    customFilterAndSearch: (filterValue: (number | \"\")[], rowData, columnDef) => {\n                        // @ts-ignore\n                        const cellValue = columnDef.field && rowData[columnDef.field] as number;\n                        return Boolean(!cellValue || ((!filterValue[0] || cellValue >= filterValue[0]) && (!filterValue[1] || cellValue <= filterValue[1])));\n                    }\n                },\n                {\n                    title: 'Цвет',\n                    field: 'Цвет',\n                    lookup: { \"Рыжий\": 'Рыжий', \"Черный\": 'Черный', \"Белый\": 'Белый' },\n                },\n            ]}\n            data={[\n                { 'Альтернатива': 'Альтернатива 1', 'Цена': 1000, 'Цвет': \"Рыжий\" },\n                { 'Альтернатива': 'Альтернатива 2', 'Цена': 110, 'Цвет': \"Черный\" },\n                { 'Альтернатива': 'Альтернатива 3', 'Цена': 50, 'Цвет': \"Белый\" },\n                { 'Альтернатива': 'Альтернатива 4', 'Цена': 2000, 'Цвет': \"Черный\" },\n            ]}\n            options={{\n                filtering: true,\n                search: false,\n            }}\n            editable={{\n                isEditable: () => false,\n                isDeletable: () => false,\n                onRowAdd: newData =>\n                    new Promise((resolve, reject) => {\n                        setTimeout(() => {\n                            {\n                                /* const data = this.state.data;\n                                data.push(newData);\n                                this.setState({ data }, () => resolve()); */\n                            }\n                            reject();\n                        }, 1000);\n                    }),\n            }}\n            // @ts-ignore\n            components={{\n                FilterRow: MyTableFilterRow,\n            }}\n            onFilterChange={(filters) => {console.log(filters)}}\n        />\n    );\n};\n","import React from \"react\";\n\nimport {FormStep1, ICriteriaData} from \"./FormStep1\";\nimport {FormStep2} from \"./FormStep2\";\nimport {Form} from \"../Form/Form\";\nimport {Methods} from \"../../../constants\";\n\nconst stepTitles = ['Критерии', 'Таблица альтернатив', 'Результаты'];\n\nexport const LSOForm: React.FC = () => {\n    const [step, setStep] = React.useState<number>(1);\n    const [criteria, setCriteria] = React.useState<string[]>([]);\n    const [experts, setExperts] = React.useState<string[]>([]);\n    const [alternativesData, setAlternativesData] = React.useState<number[][][]>([]);\n\n    const onStep1Submit = React.useCallback((criteria: ICriteriaData[]) => {\n\n        setStep(step + 1);\n    }, [step]);\n\n    const getStepContent = React.useCallback(() => {\n        switch (step) {\n            case 2:\n                return <FormStep1 onSubmit={onStep1Submit}/>;\n            case 1:\n                return <FormStep2 />;\n            default:\n                return <div>'Unknown step'</div>;\n        }\n    }, [alternativesData, experts, onStep1Submit, step]);\n\n    return (\n        <Form method={Methods.LexicographicSemiOrdering} getFormStepContent={getStepContent} step={step} stepTitles={stepTitles}/>\n    );\n}\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch,} from \"react-router-dom\";\n\nimport styles from './App.module.css';\n\nimport {MDForm} from \"./components/forms/MDForm/MDForm\";\nimport {AHPForm} from \"./components/forms/AHPForm/AHPForm\";\nimport {MethodAccordion, MethodAccordionType} from \"./components/MethodsAccordion/MethodsAccordion\";\nimport {PreferenceForm} from \"./components/forms/PreferenceForm/PreferenceForm\";\nimport {Routes, routes} from \"./routes\";\nimport {RangForm} from \"./components/forms/RangForm/RangForm\";\nimport {LSOForm} from \"./components/forms/LSOForm/LSOForm\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className={styles.app}>\n                <Switch>\n                    <Route path={routes[Routes.Group]}>\n                        <MethodAccordion type={MethodAccordionType.Group} className={styles.menu}/>\n                    </Route>\n                    <Route path={routes[Routes.Individual]}>\n                        <MethodAccordion type={MethodAccordionType.Individual} className={styles.menu}/>\n                    </Route>\n                    <Route path={routes[Routes.AHP]}>\n                        <AHPForm/>\n                    </Route>\n                    <Route path={routes[Routes.MD]}>\n                        <MDForm/>\n                    </Route>\n                    <Route path={routes[Routes.Preference]}>\n                        <PreferenceForm/>\n                    </Route>\n                    <Route path={routes[Routes.Rang]}>\n                        <RangForm/>\n                    </Route>\n                    <Route path={routes[Routes.LSO]}>\n                        <LSOForm/>\n                    </Route>\n                    <Route path={routes[Routes.Home]}>\n                        <MethodAccordion type={MethodAccordionType.All} className={styles.menu}/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteIcon\":\"FormStep1_deleteIcon__36p2u\",\"list\":\"FormStep1_list__25iym\",\"criteria\":\"FormStep1_criteria__KDwXn\",\"field\":\"FormStep1_field__3VmaW\",\"label\":\"FormStep1_label__2_f8f\",\"value\":\"FormStep1_value__3J7WF\",\"addValueButton\":\"FormStep1_addValueButton__3A3BO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MatrixInput_item__2jcE6\",\"label\":\"MatrixInput_label__HFQxS\",\"labelText\":\"MatrixInput_labelText__3xUZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"FormSteps_matrix__3PggM\",\"container\":\"FormSteps_container__24UPI\",\"matrixes\":\"FormSteps_matrixes__2VAmv\",\"median\":\"FormSteps_median__1QZFl\",\"icon\":\"FormSteps_icon__2tyT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"FormSteps_table__IFIgf\",\"tableThin\":\"FormSteps_tableThin__1FYcl\",\"matrix\":\"FormSteps_matrix__3xvUW\",\"info\":\"FormSteps_info__3TeNr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Matrix_table__1kxeZ\",\"row\":\"Matrix_row__2GaiU\",\"cell\":\"Matrix_cell__2UlPL\"};"],"sourceRoot":""}